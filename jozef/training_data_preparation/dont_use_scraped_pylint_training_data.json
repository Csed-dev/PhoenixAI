[
{
    "error_id": "abstract-class-instantiated",
    "problematic_code": "import abc\n\n\nclass Animal(abc.ABC):\n@abc.abstractmethod\ndef make_sound(self):\npass\n\n\nsheep = Animal()  # [abstract-class-instantiated]",
    "correct_code": "import abc\n\n\nclass Animal(abc.ABC):\n@abc.abstractmethod\ndef make_sound(self):\npass\n\n\nclass Sheep(Animal):\ndef make_sound(self):\nprint(\"bhaaaaa\")\n\n\nsheep = Sheep()"
},
{
    "error_id": "access-member-before-definition",
    "problematic_code": "class Unicorn:\ndef __init__(self, fluffiness_level):\nif self.fluffiness_level > 9000:  # [access-member-before-definition]\nprint(\"It's OVER-FLUFFYYYY ! *crush glasses*\")\nself.fluffiness_level = fluffiness_level",
    "correct_code": "class Unicorn:\ndef __init__(self, fluffiness_level):\nself.fluffiness_level = fluffiness_level\nif self.fluffiness_level > 9000:\nprint(\"It's OVER-FLUFFYYYY ! *crush glasses*\")"
},
{
    "error_id": "assigning-non-slot",
    "problematic_code": "class Student:\n__slots__ = (\"name\",)\n\ndef __init__(self, name, surname):\nself.name = name\nself.surname = surname  # [assigning-non-slot]\nself.setup()\n\ndef setup(self):\npass",
    "correct_code": "class Student:\n__slots__ = (\"name\", \"surname\")\n\ndef __init__(self, name, surname):\nself.name = name\nself.surname = surname\nself.setup()\n\ndef setup(self):\npass"
},
{
    "error_id": "assignment-from-no-return",
    "problematic_code": "def add(x, y):\nprint(x + y)\n\n\nvalue = add(10, 10)  # [assignment-from-no-return]",
    "correct_code": "def add(x, y):\nreturn x + y\n\n\nvalue = add(10, 10)"
},
{
    "error_id": "assignment-from-none",
    "problematic_code": "def function():\nreturn None\n\n\nf = function()  # [assignment-from-none]",
    "correct_code": "def function():\nreturn None\n\n\nf = function() if function() else 1"
},
{
    "error_id": "await-outside-async",
    "problematic_code": "import asyncio\n\n\ndef main():\nawait asyncio.sleep(1)  # [await-outside-async]",
    "correct_code": "import asyncio\n\n\nasync def main():\nawait asyncio.sleep(1)"
},
{
    "error_id": "bad-except-order",
    "problematic_code": "try:\nprint(int(input()))\nexcept Exception:\nraise\nexcept TypeError:  # [bad-except-order]\n# This block cannot be reached since TypeError exception\n# is caught by previous exception handler.\nraise",
    "correct_code": "try:\nprint(int(input()))\nexcept TypeError:\nraise\nexcept Exception:\nraise"
},
{
    "error_id": "bad-exception-cause",
    "problematic_code": "def divide(x, y):\nresult = 0\ntry:\nresult = x / y\nexcept ZeroDivisionError:\n# +1: [bad-exception-cause]\nraise ValueError(f\"Division by zero when dividing {x} by {y} !\") from result\nreturn result",
    "correct_code": "def divide(x, y):\nresult = 0\ntry:\nresult = x / y\nexcept ZeroDivisionError as exc:\nraise ValueError(f\"Division by zero when dividing {x} by {y} !\") from exc\nreturn result"
},
{
    "error_id": "bad-format-character",
    "problematic_code": "print(\"%s %z\" % (\"hello\", \"world\"))  # [bad-format-character]",
    "correct_code": "print(\"%s %s\" % (\"hello\", \"world\"))"
},
{
    "error_id": "bad-plugin-value",
    "problematic_code": "[MAIN]\nload-plugins = pylint.extensions.bad_biultin",
    "correct_code": "[MAIN]\nload-plugins = pylint.extensions.bad_builtin"
},
{
    "error_id": "bad-reversed-sequence",
    "problematic_code": "reversed({1, 2, 3, 4})  # [bad-reversed-sequence]",
    "correct_code": "reversed([1, 2, 3, 4])"
},
{
    "error_id": "bad-str-strip-call",
    "problematic_code": "\"Hello World\".strip(\"Hello\")  # [bad-str-strip-call]\n# >>> ' World'",
    "correct_code": "\"abcbc def bacabc\".strip(\"abcbc \")  # [bad-str-strip-call]\n# >>> 'def'"
},
{
    "error_id": "bad-string-format-type",
    "problematic_code": "print(\"%d\" % \"1\")  # [bad-string-format-type]",
    "correct_code": "print(\"%d\" % 1)"
},
{
    "error_id": "bad-super-call",
    "problematic_code": "class Animal:\npass\n\n\nclass Tree:\npass\n\n\nclass Cat(Animal):\ndef __init__(self):\nsuper(Tree, self).__init__()  # [bad-super-call]\nsuper(Animal, self).__init__()",
    "correct_code": "class Animal:\npass\n\n\nclass Tree:\npass\n\n\nclass Cat(Animal):\ndef __init__(self):\nsuper(Animal, self).__init__()"
},
{
    "error_id": "bidirectional-unicode",
    "problematic_code": "# +1: [bidirectional-unicode]\nexample = \"x\u200f\" * 100  #    \"\u200fx\" is assigned",
    "correct_code": "example = \"x[U+2194]\" * 100"
},
{
    "error_id": "broken-collections-callable",
    "problematic_code": "from collections.abc import Callable\nfrom typing import Optional\n\n\ndef func() -> Optional[Callable[[int], None]]:  # [broken-collections-callable]\n...",
    "correct_code": "from typing import Callable, Optional\n\n\ndef func() -> Optional[Callable[[int], None]]: ..."
},
{
    "error_id": "broken-noreturn",
    "problematic_code": "from typing import NoReturn, Union\n\n\ndef exploding_apple(apple) -> Union[None, NoReturn]:  # [broken-noreturn]\nprint(f\"{apple} is about to explode\")",
    "correct_code": "from typing import NoReturn\n\n\ndef exploding_apple(apple) -> NoReturn:\nprint(f\"{apple} is about to explode\")\nraise Exception(\"{apple} exploded !\")"
},
{
    "error_id": "catching-non-exception",
    "problematic_code": "class FooError:\npass\n\n\ntry:\n1 / 0\nexcept FooError:  # [catching-non-exception]\npass",
    "correct_code": "class FooError(Exception):\npass\n\n\ntry:\n1 / 0\nexcept FooError:\npass"
},
{
    "error_id": "class-variable-slots-conflict",
    "problematic_code": "class Person:\n# +1: [class-variable-slots-conflict, class-variable-slots-conflict, class-variable-slots-conflict]\n__slots__ = (\"age\", \"name\", \"say_hi\")\nname = None\n\ndef __init__(self, age, name):\nself.age = age\nself.name = name\n\n@property\ndef age(self):\nreturn self.age\n\ndef say_hi(self):\nprint(f\"Hi, I'm {self.name}.\")",
    "correct_code": "class Person:\n__slots__ = (\"_age\", \"name\")\n\ndef __init__(self, age, name):\nself._age = age\nself.name = name\n\n@property\ndef age(self):\nreturn self._age\n\ndef say_hi(self):\nprint(f\"Hi, I'm {self.name}.\")"
},
{
    "error_id": "continue-in-finally",
    "problematic_code": "while True:\ntry:\npass\nfinally:\ncontinue  # [continue-in-finally]",
    "correct_code": "while True:\ntry:\npass\nexcept ValueError:\npass\nelse:\ncontinue"
},
{
    "error_id": "declare-non-slot",
    "problematic_code": "class Student:\n__slots__ = (\"name\",)\n\nname: str\nsurname: str  # [declare-non-slot]",
    "correct_code": "class Student:\n__slots__ = (\"name\", \"surname\")\n\nname: str\nsurname: str"
},
{
    "error_id": "dict-iter-missing-items",
    "problematic_code": "data = {\"Paris\": 2_165_423, \"New York City\": 8_804_190, \"Tokyo\": 13_988_129}\nfor city, population in data:  # [dict-iter-missing-items]\nprint(f\"{city} has population {population}.\")",
    "correct_code": "data = {\"Paris\": 2_165_423, \"New York City\": 8_804_190, \"Tokyo\": 13_988_129}\nfor city, population in data.items():\nprint(f\"{city} has population {population}.\")"
},
{
    "error_id": "duplicate-argument-name",
    "problematic_code": "def get_fruits(apple, banana, apple):  # [duplicate-argument-name]\npass",
    "correct_code": "def get_fruits(apple, banana, orange):\npass"
},
{
    "error_id": "duplicate-bases",
    "problematic_code": "class Animal:\npass\n\n\nclass Cat(Animal, Animal):  # [duplicate-bases]\npass",
    "correct_code": "class Animal:\npass\n\n\nclass Bird(Animal):\npass\n\n\nclass Cat(Animal):\npass"
},
{
    "error_id": "format-needs-mapping",
    "problematic_code": "print(\"%(x)d %(y)d\" % [1, 2])  # [format-needs-mapping]",
    "correct_code": "print(\"%(x)d %(y)d\" % {\"x\": 1, \"y\": 2})"
},
{
    "error_id": "function-redefined",
    "problematic_code": "def get_email():\npass\n\n\ndef get_email():  # [function-redefined]\npass",
    "correct_code": "def get_email():\npass"
},
{
    "error_id": "import-error",
    "problematic_code": "from patlib import Path  # [import-error]",
    "correct_code": "from pathlib import Path"
},
{
    "error_id": "inconsistent-mro",
    "problematic_code": "class A:\npass\n\n\nclass B(A):\npass\n\n\nclass C(A, B):  # [inconsistent-mro]\npass",
    "correct_code": "class A:\npass\n\n\nclass B(A):\npass\n\n\nclass C(B):  # or 'B, A' or 'A' but not 'A, B'\npass"
},
{
    "error_id": "inherit-non-class",
    "problematic_code": "class Fruit(bool):  # [inherit-non-class]\npass",
    "correct_code": "class Fruit:\ndef __bool__(self):\npass"
},
{
    "error_id": "init-is-generator",
    "problematic_code": "class Fruit:\ndef __init__(self, worms):  # [init-is-generator]\nyield from worms\n\n\napple = Fruit([\"Fahad\", \"Anisha\", \"Tabatha\"])",
    "correct_code": "class Fruit:\ndef __init__(self, worms):\nself.__worms = worms\n\ndef worms(self):\nyield from self.__worms\n\n\napple = Fruit([\"Fahad\", \"Anisha\", \"Tabatha\"])\nfor worm in apple.worms():\npass"
},
{
    "error_id": "invalid-all-format",
    "problematic_code": "__all__ = \"CONST\"  # [invalid-all-format]\n\nCONST = 42",
    "correct_code": "__all__ = (\"CONST\",)\n\nCONST = 42"
},
{
    "error_id": "invalid-all-object",
    "problematic_code": "__all__ = (\nNone,  # [invalid-all-object]\nFruit,\nWorm,\n)\n\n\nclass Fruit:\npass\n\n\nclass Worm:\npass",
    "correct_code": "__all__ = [\"Fruit\", \"Worm\"]\n\n\nclass Fruit:\npass\n\n\nclass Worm:\npass"
},
{
    "error_id": "invalid-bool-returned",
    "problematic_code": "class CustomBool:\n\"\"\"__bool__ returns an int\"\"\"\n\ndef __bool__(self):  # [invalid-bool-returned]\nreturn 1",
    "correct_code": "class CustomBool:\n\"\"\"__bool__ returns `bool`\"\"\"\n\ndef __bool__(self):\nreturn True"
},
{
    "error_id": "invalid-bytes-returned",
    "problematic_code": "class CustomBytes:\n\"\"\"__bytes__ returns <type 'str'>\"\"\"\n\ndef __bytes__(self):  # [invalid-bytes-returned]\nreturn \"123\"",
    "correct_code": "class CustomBytes:\n\"\"\"__bytes__ returns <type 'bytes'>\"\"\"\n\ndef __bytes__(self):\nreturn b\"some bytes\""
},
{
    "error_id": "invalid-character-backspace",
    "problematic_code": "STRING = \"Invalid character backspace \b\"  # [invalid-character-backspace]",
    "correct_code": "STRING = \"Valid character backspace \\b\""
},
{
    "error_id": "invalid-character-esc",
    "problematic_code": "STRING = \"Invalid escape character \u001b\"  # [invalid-character-esc]",
    "correct_code": "STRING = \"Valid escape character \\x1B\""
},
{
    "error_id": "invalid-character-sub",
    "problematic_code": "STRING = \"Invalid character sub \u001a\"  # [invalid-character-sub]",
    "correct_code": "STRING = \"Valid character sub x1A\""
},
{
    "error_id": "invalid-character-zero-width-space",
    "problematic_code": "STRING = \"Invalid character zero-width-space \u200b\"  # [invalid-character-zero-width-space]",
    "correct_code": "STRING = \"Valid character zero-width-space u200B\""
},
{
    "error_id": "invalid-class-object",
    "problematic_code": "class Apple:\npass\n\n\nApple.__class__ = 1  # [invalid-class-object]",
    "correct_code": "class Apple:\npass\n\n\nclass RedDelicious:\npass\n\n\nApple.__class__ = RedDelicious"
},
{
    "error_id": "invalid-enum-extension",
    "problematic_code": "from enum import Enum\n\n\nclass Color(Enum):\nORANGE = 1\nCHERRY = 2\n\n\nclass Fruit(Color):  # [invalid-enum-extension]\nAPPLE = 3",
    "correct_code": "from enum import Enum\n\n\nclass Color(Enum):\nORANGE = 1\nCHERRY = 2\n\n\nclass Fruit(Enum):\nORANGE = 1\nCHERRY = 2\nAPPLE = 3"
},
{
    "error_id": "invalid-envvar-value",
    "problematic_code": "import os\n\nos.getenv(1)  # [invalid-envvar-value]",
    "correct_code": "import os\n\nos.getenv(\"1\")"
},
{
    "error_id": "invalid-field-call",
    "problematic_code": "from dataclasses import dataclass, field\n\n\n@dataclass\nclass C:\na: float\nb: float\nc: float\n\nfield(init=False)  # [invalid-field-call]\n\ndef __post_init__(self):\nself.c = self.a + self.b\n\n\nprint(field(init=False))  # [invalid-field-call]",
    "correct_code": "from dataclasses import dataclass, field, make_dataclass\n\nC = make_dataclass(\n\"C\",\n[(\"x\", int), \"y\", (\"z\", int, field(default=5))],\nnamespace={\"add_one\": lambda self: self.x + 1},\n)\n\n\n@dataclass\nclass C:\na: float\nb: float\nc: float = field(init=False)\n\ndef __post_init__(self):\nself.c = self.a + self.b"
},
{
    "error_id": "invalid-format-returned",
    "problematic_code": "class CustomFormat:\n\"\"\"__format__ returns <type 'int'>\"\"\"\n\ndef __format__(self, format_spec):  # [invalid-format-returned]\nreturn 1",
    "correct_code": "class CustomFormat:\n\"\"\"__format__ returns <type 'str'>\"\"\"\n\ndef __format__(self, format_spec):\nreturn \"hello!\""
},
{
    "error_id": "invalid-getnewargs-ex-returned",
    "problematic_code": "class CustomGetNewArgsEx:\n\"\"\"__getnewargs_ex__ returns tuple with incorrect arg length\"\"\"\n\ndef __getnewargs_ex__(self):  # [invalid-getnewargs-ex-returned]\nreturn (tuple(1), dict(x=\"y\"), 1)",
    "correct_code": "class CustomGetNewArgsEx:\n\"\"\"__getnewargs_ex__ returns <type 'tuple'>\"\"\"\n\ndef __getnewargs_ex__(self):\nreturn ((1,), {\"2\": 2})"
},
{
    "error_id": "invalid-getnewargs-returned",
    "problematic_code": "class CustomGetNewArgs:\n\"\"\"__getnewargs__ returns an integer\"\"\"\n\ndef __getnewargs__(self):  # [invalid-getnewargs-returned]\nreturn 1",
    "correct_code": "class CustomGetNewArgs:\n\"\"\"__getnewargs__ returns <type 'tuple'>\"\"\"\n\ndef __getnewargs__(self):\nreturn (1, 2)"
},
{
    "error_id": "invalid-hash-returned",
    "problematic_code": "class CustomHash:\n\"\"\"__hash__ returns dict\"\"\"\n\ndef __hash__(self):  # [invalid-hash-returned]\nreturn {}",
    "correct_code": "class CustomHash:\n\"\"\"__hash__ returns `int`\"\"\"\n\ndef __hash__(self):\nreturn 19"
},
{
    "error_id": "invalid-index-returned",
    "problematic_code": "class CustomIndex:\n\"\"\"__index__ returns a dict\"\"\"\n\ndef __index__(self):  # [invalid-index-returned]\nreturn {\"19\": \"19\"}",
    "correct_code": "class CustomIndex:\n\"\"\"__index__ returns <type 'int'>\"\"\"\n\ndef __index__(self):\nreturn 19"
},
{
    "error_id": "invalid-length-hint-returned",
    "problematic_code": "class CustomLengthHint:\n\"\"\"__length_hint__ returns non-int\"\"\"\n\ndef __length_hint__(self):  # [invalid-length-hint-returned]\nreturn 3.0",
    "correct_code": "class CustomLengthHint:\n\"\"\"__length_hint__ returns <type 'int'>\"\"\"\n\ndef __length_hint__(self):\nreturn 10"
},
{
    "error_id": "invalid-length-returned",
    "problematic_code": "class FruitBasket:\ndef __init__(self, fruits):\nself.fruits = [\"Apple\", \"Banana\", \"Orange\"]\n\ndef __len__(self):  # [invalid-length-returned]\nreturn -len(self.fruits)",
    "correct_code": "class FruitBasket:\ndef __init__(self, fruits):\nself.fruits = [\"Apple\", \"Banana\", \"Orange\"]\n\ndef __len__(self):\nreturn len(self.fruits)"
},
{
    "error_id": "invalid-metaclass",
    "problematic_code": "class Apple(metaclass=int):  # [invalid-metaclass]\npass",
    "correct_code": "class Plant:\npass\n\n\nclass Apple(Plant):\npass"
},
{
    "error_id": "invalid-repr-returned",
    "problematic_code": "class CustomRepr:\n\"\"\"__repr__ returns <type 'int'>\"\"\"\n\ndef __repr__(self):  # [invalid-repr-returned]\nreturn 1",
    "correct_code": "class CustomRepr:\n\"\"\"__repr__ returns <type 'str'>\"\"\"\n\ndef __repr__(self):\nreturn \"apples\""
},
{
    "error_id": "invalid-sequence-index",
    "problematic_code": "fruits = [\"apple\", \"banana\", \"orange\"]\nprint(fruits[\"apple\"])  # [invalid-sequence-index]",
    "correct_code": "fruits = [\"apple\", \"banana\", \"orange\"]\nprint(fruits[0])"
},
{
    "error_id": "invalid-slice-index",
    "problematic_code": "LETTERS = [\"a\", \"b\", \"c\", \"d\"]\n\nFIRST_THREE = LETTERS[:\"3\"]  # [invalid-slice-index]",
    "correct_code": "LETTERS = [\"a\", \"b\", \"c\", \"d\"]\n\nFIRST_THREE = LETTERS[:3]"
},
{
    "error_id": "invalid-slice-step",
    "problematic_code": "LETTERS = [\"a\", \"b\", \"c\", \"d\"]\n\nLETTERS[::0]  # [invalid-slice-step]",
    "correct_code": "LETTERS = [\"a\", \"b\", \"c\", \"d\"]\n\nLETTERS[::2]"
},
{
    "error_id": "invalid-slots",
    "problematic_code": "class Person:  # [invalid-slots]\n__slots__ = 42",
    "correct_code": "class Person:\n__slots__ = (\"name\", \"age\")"
},
{
    "error_id": "invalid-slots-object",
    "problematic_code": "class Person:\n__slots__ = (\"name\", 3)  # [invalid-slots-object]",
    "correct_code": "class Person:\n__slots__ = (\"name\", \"surname\")"
},
{
    "error_id": "invalid-star-assignment-target",
    "problematic_code": "*fruit = [\"apple\", \"banana\", \"orange\"]  # [invalid-star-assignment-target]",
    "correct_code": "fruit = [\"apple\", \"banana\", \"orange\"]"
},
{
    "error_id": "invalid-str-returned",
    "problematic_code": "class CustomStr:\n\"\"\"__str__ returns int\"\"\"\n\ndef __str__(self):  # [invalid-str-returned]\nreturn 1",
    "correct_code": "class CustomStr:\n\"\"\"__str__ returns <type 'str'>\"\"\"\n\ndef __str__(self):\nreturn \"oranges\""
},
{
    "error_id": "invalid-unary-operand-type",
    "problematic_code": "cherries = 10\neaten_cherries = int\ncherries = -eaten_cherries  # [invalid-unary-operand-type]",
    "correct_code": "cherries = 10\neaten_cherries = 2\ncherries -= eaten_cherries"
},
{
    "error_id": "logging-format-truncated",
    "problematic_code": "import logging\nimport sys\n\nlogging.warning(\"Python version: %\", sys.version)  # [logging-format-truncated]",
    "correct_code": "import logging\nimport sys\n\nlogging.warning(\"Python version: %s\", sys.version)"
},
{
    "error_id": "logging-too-few-args",
    "problematic_code": "import logging\n\ntry:\nfunction()\nexcept Exception as e:\nlogging.error(\"%s error occurred: %s\", e)  # [logging-too-few-args]\nraise",
    "correct_code": "import logging\n\ntry:\nfunction()\nexcept Exception as e:\nlogging.error(\"%s error occurred: %s\", type(e), e)\nraise"
},
{
    "error_id": "logging-too-many-args",
    "problematic_code": "import logging\n\ntry:\nfunction()\nexcept Exception as e:\nlogging.error(\"Error occurred: %s\", type(e), e)  # [logging-too-many-args]\nraise",
    "correct_code": "import logging\n\ntry:\nfunction()\nexcept Exception as e:\nlogging.error(\"%s error occurred: %s\", type(e), e)\nraise"
},
{
    "error_id": "logging-unsupported-format",
    "problematic_code": "import logging\n\nlogging.info(\"%s %y !\", \"Hello\", \"World\")  # [logging-unsupported-format]",
    "correct_code": "import logging\n\nlogging.info(\"%s %s !\", \"Hello\", \"World\")"
},
{
    "error_id": "method-hidden",
    "problematic_code": "class Fruit:\ndef __init__(self, vitamins):\nself.vitamins = vitamins\n\ndef vitamins(self):  # [method-hidden]\npass",
    "correct_code": "class Fruit:\ndef __init__(self, vitamins):\nself.vitamins = vitamins\n\ndef antioxidants(self):\npass"
},
{
    "error_id": "misplaced-bare-raise",
    "problematic_code": "def validate_positive(x):\nif x <= 0:\nraise  # [misplaced-bare-raise]",
    "correct_code": "def validate_positive(x):\nif x <= 0:\nraise ValueError(f\"{x} is not positive\")"
},
{
    "error_id": "misplaced-format-function",
    "problematic_code": "print(\"Value: {}\").format(\"Car\")  # [misplaced-format-function]",
    "correct_code": "print(\"Value: {}\".format(\"Car\"))"
},
{
    "error_id": "missing-format-string-key",
    "problematic_code": "# +1: [missing-format-string-key]\nfruit_prices = \"\"\"\nApple: %(apple_price)d \u00a4\nOrange: %(orange_price)d \u00a4\n\"\"\" % {\n\"apple_price\": 42\n}",
    "correct_code": "fruit_prices = \"\"\"\nApple: %(apple_price)d \u00a4\nOrange: %(orange_price)d \u00a4\n\"\"\" % {\n\"apple_price\": 42,\n\"orange_price\": 87,\n}"
},
{
    "error_id": "missing-kwoa",
    "problematic_code": "def target(pos, *, keyword):\nreturn pos + keyword\n\n\ndef not_forwarding_kwargs(*args, **kwargs):\ntarget(*args)  # [missing-kwoa]",
    "correct_code": "def target(pos, *, keyword):\nreturn pos + keyword\n\n\ndef not_forwarding_kwargs(*args, **kwargs):\ntarget(*args, **kwargs)"
},
{
    "error_id": "mixed-format-string",
    "problematic_code": "print(\"x=%(x)d, y=%d\" % (0, 1))  # [mixed-format-string]",
    "correct_code": "print(\"x=%(x)d, y=%(y)d\" % {\"x\": 0, \"y\": 1})"
},
{
    "error_id": "modified-iterating-dict",
    "problematic_code": "fruits = {\"apple\": 1, \"orange\": 2, \"mango\": 3}\n\ni = 0\nfor fruit in fruits:\nfruits[\"apple\"] = i  # [modified-iterating-dict]\ni += 1",
    "correct_code": "fruits = {\"apple\": 1, \"orange\": 2, \"mango\": 3}\n\ni = 0\nfor fruit in fruits.copy():\nfruits[\"apple\"] = i\ni += 1"
},
{
    "error_id": "modified-iterating-set",
    "problematic_code": "fruits = {\"apple\", \"orange\", \"mango\"}\nfor fruit in fruits:\nfruits.add(fruit + \"yum\")  # [modified-iterating-set]",
    "correct_code": "fruits = {\"apple\", \"orange\", \"mango\"}\nfor fruit in fruits.copy():\nfruits.add(fruit + \"yum\")"
},
{
    "error_id": "no-member",
    "problematic_code": "from pathlib import Path\n\ndirectories = Path(\".\").mothers  # [no-member]\n\n\nclass Cat:\ndef meow(self):\nprint(\"Meow\")\n\n\nCat().roar()  # [no-member]",
    "correct_code": "from pathlib import Path\n\ndirectories = Path(\".\").parents\n\n\nclass Cat:\ndef meow(self):\nprint(\"Meow\")\n\n\nCat().meow()"
},
{
    "error_id": "no-method-argument",
    "problematic_code": "class Person:\ndef print_greeting():  # [no-method-argument]\nprint(\"hello\")",
    "correct_code": "class Person:\ndef print_greeting(self):\nprint(\"hello\")"
},
{
    "error_id": "no-name-in-module",
    "problematic_code": "from os import pizza  # [no-name-in-module]",
    "correct_code": "from os import path"
},
{
    "error_id": "no-self-argument",
    "problematic_code": "class Fruit:\ndef __init__(this, name):  # [no-self-argument]\nthis.name = name",
    "correct_code": "class Fruit:\ndef __init__(self, name):\nself.name = name"
},
{
    "error_id": "no-value-for-parameter",
    "problematic_code": "def add(x, y):\nreturn x + y\n\n\nadd(1)  # [no-value-for-parameter]",
    "correct_code": "def add(x, y):\nreturn x + y\n\n\nadd(1, 2)"
},
{
    "error_id": "non-iterator-returned",
    "problematic_code": "import random\n\n\nclass GenericAstrology:\ndef __init__(self, signs, predictions):\nself.signs = signs\nself.predictions = predictions\n\ndef __iter__(self):  # [non-iterator-returned]\nself.index = 0\nself.number_of_prediction = len(self.predictions)\nreturn self\n\n\nSIGNS = [\"Aries\", \"Taurus\", \"Gemini\", \"Cancer\", \"Leo\", \"Virgo\", \"Libra\"]\nPREDICTIONS = [\"good things\", \"bad thing\", \"existential dread\"]\nfor sign, prediction in GenericAstrology(SIGNS, PREDICTIONS):\nprint(f\"{sign} : {prediction} today\")",
    "correct_code": "import random\n\n\nclass GenericAstrology:\ndef __init__(self, signs, predictions):\nself.signs = signs\nself.predictions = predictions\n\ndef __iter__(self):\nself.index = 0\nself.number_of_prediction = len(self.predictions)\nreturn self\n\ndef __next__(self):\nif self.index == len(self.signs):\nraise StopIteration\nself.index += 1\nprediction_index = random.randint(0, self.number_of_prediction - 1)\nreturn self.signs[self.index - 1], self.predictions[prediction_index]\n\n\nSIGNS = [\"Aries\", \"Taurus\", \"Gemini\", \"Cancer\", \"Leo\", \"Virgo\", \"Libra\"]\nPREDICTIONS = [\"good things\", \"bad thing\", \"existential dread\"]\nfor sign, prediction in GenericAstrology(SIGNS, PREDICTIONS):\nprint(f\"{sign} : {prediction} today\")"
},
{
    "error_id": "nonexistent-operator",
    "problematic_code": "i = 0\n\nwhile i <= 10:\nprint(i)\n++i  # [nonexistent-operator]",
    "correct_code": "i = 0\n\nwhile i <= 10:\nprint(i)\ni += 1"
},
{
    "error_id": "nonlocal-and-global",
    "problematic_code": "NUMBER = 42\n\n\ndef update_number(number):  # [nonlocal-and-global]\nglobal NUMBER\nnonlocal NUMBER\nNUMBER = number\nprint(f\"New global number is: {NUMBER}\")\n\n\nupdate_number(24)",
    "correct_code": "NUMBER = 42\n\n\ndef update_number(number):\nglobal NUMBER\nNUMBER = number\nprint(f\"New global number is: {NUMBER}\")\n\n\nupdate_number(24)"
},
{
    "error_id": "nonlocal-without-binding",
    "problematic_code": "class Fruit:\ndef get_color(self):\nnonlocal colors  # [nonlocal-without-binding]",
    "correct_code": "class Fruit:\ncolors = [\"red\", \"green\"]\n\ndef get_color(self):\nnonlocal colors"
},
{
    "error_id": "not-a-mapping",
    "problematic_code": "def print_colors(**colors):\nprint(colors)\n\n\nprint_colors(**list(\"red\", \"black\"))  # [not-a-mapping]",
    "correct_code": "def print_colors(**colors):\nprint(colors)\n\n\nprint_colors(**dict(red=1, black=2))"
},
{
    "error_id": "not-an-iterable",
    "problematic_code": "for i in 10:  # [not-an-iterable]\npass",
    "correct_code": "for i in \"10\":\npass"
},
{
    "error_id": "not-async-context-manager",
    "problematic_code": "class ContextManager:\ndef __enter__(self):\npass\n\ndef __exit__(self, *exc):\npass\n\n\nasync def foo():\nasync with ContextManager():  # [not-async-context-manager]\npass",
    "correct_code": "class AsyncContextManager:\ndef __aenter__(self):\npass\n\ndef __aexit__(self, *exc):\npass\n\n\nasync def foo():\nasync with AsyncContextManager():\npass"
},
{
    "error_id": "not-callable",
    "problematic_code": "NUMBER = 42\nprint(NUMBER())  # [not-callable]",
    "correct_code": "NUMBER = 42\nprint(NUMBER)"
},
{
    "error_id": "not-context-manager",
    "problematic_code": "class MyContextManager:\ndef __enter__(self):\npass\n\n\nwith MyContextManager() as c:  # [not-context-manager]\npass",
    "correct_code": "class MyContextManager:\ndef __enter__(self):\npass\n\ndef __exit__(self, *exc):\npass\n\n\nwith MyContextManager() as c:\npass"
},
{
    "error_id": "not-in-loop",
    "problematic_code": "def print_even_numbers():\nfor i in range(100):\nif i % 2 == 0:\nprint(i)\nelse:\ncontinue  # [not-in-loop]",
    "correct_code": "def print_even_numbers():\nfor i in range(100):\nif i % 2:\ncontinue\nprint(i)"
},
{
    "error_id": "notimplemented-raised",
    "problematic_code": "class Worm:\ndef bore(self):\nraise NotImplemented  # [notimplemented-raised]",
    "correct_code": "class Worm:\ndef bore(self):\nraise NotImplementedError"
},
{
    "error_id": "positional-only-arguments-expected",
    "problematic_code": "def cube(n, /):\n\"\"\"Takes in a number n, returns the cube of n\"\"\"\nreturn n**3\n\n\ncube(n=2)  # [positional-only-arguments-expected]",
    "correct_code": "def cube(n, /):\n\"\"\"Takes in a number n, returns the cube of n\"\"\"\nreturn n**3\n\n\ncube(2)"
},
{
    "error_id": "possibly-used-before-assignment",
    "problematic_code": "def check_lunchbox(items: list[str]):\nif not items:\nempty = True\nprint(empty)  # [possibly-used-before-assignment]",
    "correct_code": "def check_lunchbox(items: list[str]):\nempty = False\nif not items:\nempty = True\nprint(empty)"
},
{
    "error_id": "potential-index-error",
    "problematic_code": "print([1, 2, 3][3])  # [potential-index-error]",
    "correct_code": "print([1, 2, 3][2])"
},
{
    "error_id": "raising-bad-type",
    "problematic_code": "class FasterThanTheSpeedOfLightError(ZeroDivisionError):\ndef __init__(self):\nsuper().__init__(\"You can't go faster than the speed of light !\")\n\n\ndef calculate_speed(distance: float, time: float) -> float:\ntry:\nreturn distance / time\nexcept ZeroDivisionError as e:\nraise None  # [raising-bad-type]",
    "correct_code": "class FasterThanTheSpeedOfLightError(ZeroDivisionError):\ndef __init__(self):\nsuper().__init__(\"You can't go faster than the speed of light !\")\n\n\ndef calculate_speed(distance: float, time: float) -> float:\ntry:\nreturn distance / time\nexcept ZeroDivisionError as e:\nraise FasterThanTheSpeedOfLightError() from e"
},
{
    "error_id": "raising-non-exception",
    "problematic_code": "raise str  # [raising-non-exception]",
    "correct_code": "raise Exception(\"Goodbye world !\")"
},
{
    "error_id": "redundant-keyword-arg",
    "problematic_code": "def square(x):\nreturn x * x\n\n\nsquare(5, x=4)  # [redundant-keyword-arg]",
    "correct_code": "def square(x):\nreturn x * x\n\n\nsquare(5)"
},
{
    "error_id": "relative-beyond-top-level",
    "problematic_code": "from ................antigravity import NGField  # [relative-beyond-top-level]",
    "correct_code": "from physic.antigravity import NGField"
},
{
    "error_id": "repeated-keyword",
    "problematic_code": "def func(a, b, c):\nreturn a, b, c\n\n\nfunc(1, 2, c=3, **{\"c\": 4})  # [repeated-keyword]\nfunc(1, 2, **{\"c\": 3}, **{\"c\": 4})  # [repeated-keyword]",
    "correct_code": "def func(a, b, c):\nreturn a, b, c\n\n\nfunc(1, 2, c=3)"
},
{
    "error_id": "return-arg-in-generator",
    "problematic_code": "def yield_numbers():\nfor number in range(10):\nyield number\nreturn \"I am now allowed!\"  # This was not allowed in Python 3.3 and earlier.",
    "correct_code": "def interrogate_until_you_find_jack(pirates):\nfor pirate in pirates:\nif pirate == \"Captain Jack Sparrow\":\nreturn \"Arrr! We've found our captain!\"\nyield pirate"
},
{
    "error_id": "return-in-init",
    "problematic_code": "class Sum:\ndef __init__(self, a, b):  # [return-in-init]\nreturn a + b",
    "correct_code": "class Sum:\ndef __init__(self, a, b) -> None:\nself.result = a + b"
},
{
    "error_id": "return-outside-function",
    "problematic_code": "return 42  # [return-outside-function]",
    "correct_code": "def get_the_answer():\nreturn 42"
},
{
    "error_id": "singledispatch-method",
    "problematic_code": "from functools import singledispatch\n\n\nclass Board:\n@singledispatch  # [singledispatch-method]\ndef convert_position(self, position):\npass\n\n@convert_position.register  # [singledispatch-method]\ndef _(self, position: str) -> tuple:\nposition_a, position_b = position.split(\",\")\nreturn (int(position_a), int(position_b))\n\n@convert_position.register  # [singledispatch-method]\ndef _(self, position: tuple) -> str:\nreturn f\"{position[0]},{position[1]}\"",
    "correct_code": "from functools import singledispatch\n\n\n@singledispatch\ndef convert_position(position):\nprint(position)\n\n\n@convert_position.register\ndef _(position: str) -> tuple:\nposition_a, position_b = position.split(\",\")\nreturn (int(position_a), int(position_b))\n\n\n@convert_position.register\ndef _(position: tuple) -> str:\nreturn f\"{position[0]},{position[1]}\""
},
{
    "error_id": "singledispatchmethod-function",
    "problematic_code": "from functools import singledispatchmethod\n\n\n@singledispatchmethod  # [singledispatchmethod-function]\ndef convert_position(position):\nprint(position)\n\n\n@convert_position.register  # [singledispatchmethod-function]\ndef _(position: str) -> tuple:\nposition_a, position_b = position.split(\",\")\nreturn (int(position_a), int(position_b))\n\n\n@convert_position.register  # [singledispatchmethod-function]\ndef _(position: tuple) -> str:\nreturn f\"{position[0]},{position[1]}\"",
    "correct_code": "from functools import singledispatchmethod\n\n\nclass Board:\n@singledispatchmethod\ndef convert_position(cls, position):\npass\n\n@singledispatchmethod\n@classmethod\ndef _(cls, position: str) -> tuple:\nposition_a, position_b = position.split(\",\")\nreturn (int(position_a), int(position_b))\n\n@singledispatchmethod\n@classmethod\ndef _(cls, position: tuple) -> str:\nreturn f\"{position[0]},{position[1]}\""
},
{
    "error_id": "star-needs-assignment-target",
    "problematic_code": "stars = *[\"Sirius\", \"Arcturus\", \"Vega\"]  # [star-needs-assignment-target]",
    "correct_code": "sirius, *arcturus_and_vega = [\"Sirius\", \"Arcturus\", \"Vega\"]"
},
{
    "error_id": "syntax-error",
    "problematic_code": "fruit_stock = {\n'apple': 42,\n'orange': 21  # [syntax-error]\n'banana': 12\n}",
    "correct_code": "fruit_stock = {\"apple\": 42, \"orange\": 21, \"banana\": 12}"
},
{
    "error_id": "too-few-format-args",
    "problematic_code": "print(\"Today is {0}, so tomorrow will be {1}\".format(\"Monday\"))  # [too-few-format-args]",
    "correct_code": "print(\"Today is {0}, so tomorrow will be {1}\".format(\"Monday\", \"Tuesday\"))"
},
{
    "error_id": "too-many-format-args",
    "problematic_code": "# +1: [too-many-format-args]\nprint(\"Today is {0}, so tomorrow will be {1}\".format(\"Monday\", \"Tuesday\", \"Wednesday\"))",
    "correct_code": "print(\"Today is {0}, so tomorrow will be {1}\".format(\"Monday\", \"Tuesday\"))"
},
{
    "error_id": "too-many-function-args",
    "problematic_code": "class Fruit:\ndef __init__(self, color):\nself.color = color\n\n\napple = Fruit(\"red\", \"apple\", [1, 2, 3])  # [too-many-function-args]",
    "correct_code": "class Fruit:\ndef __init__(self, color, name):\nself.color = color\nself.name = name\n\n\napple = Fruit(\"red\", \"apple\")"
},
{
    "error_id": "too-many-star-expressions",
    "problematic_code": "*stars, *constellations = [\"Sirius\", \"Arcturus\", \"Vega\"]  # [too-many-star-expressions]",
    "correct_code": "*sirius_and_arcturus, vega = [\"Sirius\", \"Arcturus\", \"Vega\"]"
},
{
    "error_id": "truncated-format-string",
    "problematic_code": "PARG_2 = 1\n\nprint(\"strange format %2\" % PARG_2)  # [truncated-format-string]",
    "correct_code": "PARG_2 = 1\n\nprint(f\"strange format {PARG_2}\")"
},
{
    "error_id": "undefined-all-variable",
    "problematic_code": "__all__ = [\"get_fruit_colour\"]  # [undefined-all-variable]\n\n\ndef get_fruit_color():\npass",
    "correct_code": "__all__ = [\"get_fruit_color\"]\n\n\ndef get_fruit_color():\npass"
},
{
    "error_id": "undefined-variable",
    "problematic_code": "print(number + 2)  # [undefined-variable]",
    "correct_code": "number = 3\nprint(number + 2)"
},
{
    "error_id": "unexpected-keyword-arg",
    "problematic_code": "def print_coordinates(x=0, y=0):\nprint(f\"{x=}, {y=}\")\n\n\nprint_coordinates(x=1, y=2, z=3)  # [unexpected-keyword-arg]",
    "correct_code": "def print_coordinates(x=0, y=0):\nprint(f\"{x=}, {y=}\")\n\n\nprint_coordinates(x=1, y=2)"
},
{
    "error_id": "unexpected-special-method-signature",
    "problematic_code": "class ContextManager:\ndef __enter__(self, context):  # [unexpected-special-method-signature]\npass\n\ndef __exit__(self, type):  # [unexpected-special-method-signature]\npass",
    "correct_code": "class ContextManager:\ndef __enter__(self):\npass\n\ndef __exit__(self, type, value, traceback):\npass"
},
{
    "error_id": "unhashable-member",
    "problematic_code": "# Print the number of apples:\nprint({\"apple\": 42}[[\"apple\"]])  # [unhashable-member]",
    "correct_code": "# Print the number of apples:\nprint({\"apple\": 42}[\"apple\"])"
},
{
    "error_id": "unpacking-non-sequence",
    "problematic_code": "a, b, c = 1  # [unpacking-non-sequence]",
    "correct_code": "a, b, c = 1, 2, 3"
},
{
    "error_id": "unrecognized-inline-option",
    "problematic_code": "# +1: [unrecognized-inline-option]\n# pylint:applesoranges=1",
    "correct_code": "# pylint: enable=too-many-public-methods"
},
{
    "error_id": "unrecognized-option",
    "problematic_code": "[tool.pylint]\njars = \"10\"",
    "correct_code": "[tool.pylint]\njobs = \"10\""
},
{
    "error_id": "unsubscriptable-object",
    "problematic_code": "class Fruit:\npass\n\n\nFruit()[1]  # [unsubscriptable-object]",
    "correct_code": "class Fruit:\ndef __init__(self):\nself.colors = [\"red\", \"orange\", \"yellow\"]\n\ndef __getitem__(self, idx):\nreturn self.colors[idx]\n\n\nFruit()[1]"
},
{
    "error_id": "unsupported-assignment-operation",
    "problematic_code": "def pick_fruits(fruits):\nfor fruit in fruits:\nprint(fruit)\n\n\npick_fruits([\"apple\"])[0] = \"orange\"  # [unsupported-assignment-operation]",
    "correct_code": "def pick_fruits(fruits):\nfor fruit in fruits:\nprint(fruit)\n\nreturn []\n\n\npick_fruits([\"apple\"])[0] = \"orange\""
},
{
    "error_id": "unsupported-binary-operation",
    "problematic_code": "drink = \"water\" | None  # [unsupported-binary-operation]\nresult = [] | None  # [unsupported-binary-operation]",
    "correct_code": "masked = 0b111111 & 0b001100\nresult = 0xAEFF | 0x0B99"
},
{
    "error_id": "unsupported-delete-operation",
    "problematic_code": "FRUITS = (\"apple\", \"orange\", \"berry\")\n\ndel FRUITS[0]  # [unsupported-delete-operation]",
    "correct_code": "FRUITS = [\"apple\", \"orange\", \"berry\"]\n\ndel FRUITS[0]"
},
{
    "error_id": "unsupported-membership-test",
    "problematic_code": "class Fruit:\npass\n\n\napple = \"apple\" in Fruit()  # [unsupported-membership-test]",
    "correct_code": "class Fruit:\nFRUITS = [\"apple\", \"orange\"]\n\ndef __contains__(self, name):\nreturn name in self.FRUITS\n\n\napple = \"apple\" in Fruit()"
},
{
    "error_id": "used-before-assignment",
    "problematic_code": "print(hello)  # [used-before-assignment]\nhello = \"Hello World !\"",
    "correct_code": "hello = \"Hello World !\"\nprint(hello)"
},
{
    "error_id": "used-prior-global-declaration",
    "problematic_code": "TOMATO = \"black cherry\"\n\n\ndef update_tomato():\nprint(TOMATO)  # [used-prior-global-declaration]\nglobal TOMATO\nTOMATO = \"cherry tomato\"",
    "correct_code": "TOMATO = \"black cherry\"\n\n\ndef update_tomato():\nglobal TOMATO\nTOMATO = \"moneymaker\""
},
{
    "error_id": "yield-inside-async-function",
    "problematic_code": "async def foo():\nyield from [1, 2, 3]  # [yield-inside-async-function]",
    "correct_code": "async def foo():\ndef _inner_foo():\nyield from [1, 2, 3]\n\n\nasync def foo():\nyield 42"
},
{
    "error_id": "yield-outside-function",
    "problematic_code": "for i in range(10):\nyield i  # [yield-outside-function]",
    "correct_code": "def one_to_ten():\nfor i in range(10):\nyield i"
},
{
    "error_id": "abstract-method",
    "problematic_code": "import abc\n\n\nclass WildAnimal:\n@abc.abstractmethod\ndef make_sound(self):\npass\n\n\nclass Panther(WildAnimal):  # [abstract-method]\npass",
    "correct_code": "class Pet:\ndef make_sound(self):\nraise NotImplementedError\n\n\nclass Cat(Pet):  # [abstract-method]\npass"
},
{
    "error_id": "anomalous-backslash-in-string",
    "problematic_code": "string = \"\\z\"  # [syntax-error]",
    "correct_code": "string = \"\\\\z\""
},
{
    "error_id": "anomalous-unicode-escape-in-string",
    "problematic_code": "print(b\"\\u%b\" % b\"0394\")  # [syntax-error]",
    "correct_code": "print(b\"\\\\u%b\" % b\"0394\")"
},
{
    "error_id": "arguments-differ",
    "problematic_code": "class Drink:\ndef mix(self, fluid_one, fluid_two):\nreturn fluid_one + fluid_two\n\n\nclass Cocktail(Drink):\ndef mix(self, fluid_one, fluid_two, alcoholic_fluid):  # [arguments-differ]\nreturn fluid_one + fluid_two + alcoholic_fluid",
    "correct_code": "\"\"\"\nHere we assume that drink and cocktail are the same thing and should actually\ninherit from each over. We also assume that 'Drink' are 'Cocktail' without\nalcohol (we added the alcohol option in the base class).\n\nThis permit to not have to modify the cocktails calls downstream but the case where\nan alcohol is mixed in a soft drink will need to be handled.\n\"\"\"\n\n\nclass Drink:\ndef mix(self, fluid_one, fluid_two, alcoholic_fluid=None):\n# if alcoholic_fluid is not None:\n#     raise Exception(f\"This soft drink has {alcoholic_fluid} in it !\")\nreturn fluid_one + fluid_two\n\n\nclass Cocktail(Drink):\ndef mix(self, fluid_one, fluid_two, alcoholic_fluid):\nreturn fluid_one + fluid_two + alcoholic_fluid"
},
{
    "error_id": "arguments-out-of-order",
    "problematic_code": "def function_3_args(first_argument, second_argument, third_argument):\n\"\"\"Three arguments function\"\"\"\nreturn first_argument, second_argument, third_argument\n\n\ndef args_out_of_order():\nfirst_argument = 1\nsecond_argument = 2\nthird_argument = 3\n\nfunction_3_args(  # [arguments-out-of-order]\nfirst_argument, third_argument, second_argument\n)",
    "correct_code": "def function_3_args(first_argument, second_argument, third_argument):\n\"\"\"Three arguments function\"\"\"\nreturn first_argument, second_argument, third_argument\n\n\ndef args_out_of_order():\nfirst_argument = 1\nsecond_argument = 2\nthird_argument = 3\n\nfunction_3_args(first_argument, second_argument, third_argument)"
},
{
    "error_id": "arguments-renamed",
    "problematic_code": "class Fruit:\ndef brew(self, ingredient_name: str):\nprint(f\"Brewing a {type(self)} with {ingredient_name}\")\n\n\nclass Apple(Fruit): ...\n\n\nclass Orange(Fruit):\ndef brew(self, flavor: str):  # [arguments-renamed]\nprint(f\"Brewing an orange with {flavor}\")\n\n\nfor fruit, ingredient_name in [[Orange(), \"thyme\"], [Apple(), \"cinnamon\"]]:\nfruit.brew(ingredient_name=ingredient_name)",
    "correct_code": "class Fruit:\ndef brew(self, ingredient_name: str):\nprint(f\"Brewing a {type(self)} with {ingredient_name}\")\n\n\nclass Apple(Fruit): ...\n\n\nclass Orange(Fruit):\ndef brew(self, ingredient_name: str):\nprint(f\"Brewing an orange with {ingredient_name}\")\n\n\nfor fruit, ingredient_name in [[Orange(), \"thyme\"], [Apple(), \"cinnamon\"]]:\nfruit.brew(ingredient_name=ingredient_name)"
},
{
    "error_id": "assert-on-string-literal",
    "problematic_code": "def test_division():\na = 9 / 3\nassert \"No ZeroDivisionError were raised\"  # [assert-on-string-literal]",
    "correct_code": "def test_division():\na = 9 / 3\nassert a == 3"
},
{
    "error_id": "assert-on-tuple",
    "problematic_code": "assert (1, None)  # [assert-on-tuple]",
    "correct_code": "x, y = (1, None)\nassert x\nassert y"
},
{
    "error_id": "attribute-defined-outside-init",
    "problematic_code": "class Student:\ndef register(self):\nself.is_registered = True  # [attribute-defined-outside-init]",
    "correct_code": "class Student:\ndef __init__(self):\nself.is_registered = False\n\ndef register(self):\nself.is_registered = True"
},
{
    "error_id": "bad-builtin",
    "problematic_code": "numbers = list(map(lambda x: 2 * x, [1, 2, 3]))  # [bad-builtin]\nprint(numbers)",
    "correct_code": "numbers = [2 * x for x in [1, 2, 3]]\nprint(numbers)"
},
{
    "error_id": "bad-chained-comparison",
    "problematic_code": "shop = {\n# animal: (specie, descriptions)\n\"parrot\": (\"Norvegian blue\", (\"restin'\", \"remarkable\", \"beautiful plumage\")),\n}\n\nif \"parrot\" in shop is \"restin'\":  # [bad-chained-comparison]\nprint(\"Hellooooo, Pooolllllyyy ! WAAAAKEEY, WAKKEEEY !\")",
    "correct_code": "def xor_check(*, left=None, right=None):\nif left is None != right is None:  # [bad-chained-comparison]\nraise ValueError(\n\"Either both left= and right= need to be provided or none should.\"\n)"
},
{
    "error_id": "bad-dunder-name",
    "problematic_code": "class Apples:\ndef _init_(self):  # [bad-dunder-name]\npass\n\ndef __hello__(self):  # [bad-dunder-name]\nprint(\"hello\")",
    "correct_code": "class Apples:\ndef __init__(self):\npass\n\ndef hello(self):\nprint(\"hello\")"
},
{
    "error_id": "bad-format-string",
    "problematic_code": "print(\"{a[0] + a[1]}\".format(a=[0, 1]))  # [bad-format-string]",
    "correct_code": "print(\"{a[0]} + {a[1]}\".format(a=[0, 1]))"
},
{
    "error_id": "bad-format-string-key",
    "problematic_code": "print(\"%(one)d\" % {\"one\": 1, 2: 2})  # [bad-format-string-key]",
    "correct_code": "print(\"%(one)d, %(two)d\" % {\"one\": 1, \"two\": 2})"
},
{
    "error_id": "bad-indentation",
    "problematic_code": "if input():\nprint('yes')  # [bad-indentation]",
    "correct_code": "if input():\nprint(\"yes\")"
},
{
    "error_id": "bad-open-mode",
    "problematic_code": "def open_and_get_content(file_path):\nwith open(file_path, \"rwx\") as file:  # [bad-open-mode]\nreturn file.read()",
    "correct_code": "def open_and_get_content(file_path):\nwith open(file_path, \"r\") as file:\nreturn file.read()"
},
{
    "error_id": "bad-staticmethod-argument",
    "problematic_code": "class Wolf:\n@staticmethod\ndef eat(self):  # [bad-staticmethod-argument]\npass",
    "correct_code": "class Wolf:\n@staticmethod\ndef eat(sheep):\npass"
},
{
    "error_id": "bad-thread-instantiation",
    "problematic_code": "import threading\n\n\ndef thread_target(n):\nprint(n**2)\n\n\nthread = threading.Thread(lambda: None)  # [bad-thread-instantiation]\nthread.start()",
    "correct_code": "import threading\n\n\ndef thread_target(n):\nprint(n**2)\n\n\nthread = threading.Thread(target=thread_target, args=(10,))\nthread.start()"
},
{
    "error_id": "bare-except",
    "problematic_code": "try:\nimport platform_specific_module\nexcept:  # [bare-except]\nplatform_specific_module = None",
    "correct_code": "try:\nimport platform_specific_module\nexcept ImportError:\nplatform_specific_module = None"
},
{
    "error_id": "binary-op-exception",
    "problematic_code": "try:\n1 / 0\nexcept ZeroDivisionError or ValueError:  # [binary-op-exception]\npass",
    "correct_code": "try:\n1 / 0\nexcept (ZeroDivisionError, ValueError):\npass"
},
{
    "error_id": "boolean-datetime",
    "problematic_code": "import datetime\n\nif datetime.time():  # [boolean-datetime]\nprint(\"It is time.\")\n\n\nif datetime.datetime.now().time():  # [boolean-datetime]\nprint(\"Now or never.\")",
    "correct_code": "import datetime\n\ntime_now_utc = datetime.datetime.now(tz=datetime.UTC).time()\n\nif time_now_utc > datetime.time(6, 0):\nprint(\"Daytime!\")\n\nif time_now_utc < datetime.time(6, 0):\nprint(\"Nighttime!\")"
},
{
    "error_id": "broad-exception-caught",
    "problematic_code": "try:\nimport platform_specific_module\nexcept Exception:  # [broad-exception-caught]\nplatform_specific_module = None",
    "correct_code": "try:\nimport platform_specific_module\nexcept ImportError:\nplatform_specific_module = None"
},
{
    "error_id": "broad-exception-raised",
    "problematic_code": "def small_apple(apple, length):\nif len(apple) < length:\nraise Exception(\"Apple is too small!\")  # [broad-exception-raised]\nprint(f\"{apple} is proper size.\")",
    "correct_code": "def small_apple(apple, length):\nif len(apple) < length:\nraise ValueError(\"Apple is too small!\")\nprint(f\"{apple} is proper size.\")"
},
{
    "error_id": "cell-var-from-loop",
    "problematic_code": "def teacher_greeting(names):\ngreetings = []\nfor name in names:\n\ndef greet():\n# do something\nprint(f\"Hello, {name}!\")  # [cell-var-from-loop]\n\nif name.isalpha():\ngreetings.append(greet)\n\nfor greet in greetings:\n# the \"name\" variable is evaluated when the function is called here,\n# which is the last value it had in the loop - \"Not-A-Name\"\ngreet()\n\n\nteacher_greeting([\"Graham\", \"John\", \"Terry\", \"Eric\", \"Terry\", \"Michael\"])\n# \"Hello, Michael!\"\n# \"Hello, Michael!\"\n# \"Hello, Michael!\"\n# \"Hello, Michael!\"\n# \"Hello, Michael!\"",
    "correct_code": "import functools\n\n\ndef teacher_greeting(names):\ngreetings = []\nfor name in names:\nif name.isalpha():\n# \"name\" is evaluated when the partial is created here, so this\n# does not do lazy evaluation\ngreetings.append(functools.partial(print, f\"Hello, {name}!\"))\n\nfor greet in greetings:\n# `partial`s are called like functions, but you've already passed the\n# arguments to them\ngreet()\n\n\nteacher_greeting([\"Graham\", \"John\", \"Terry\", \"Eric\", \"Terry\", \"Michael\"])\n# \"Hello, Graham!\"\n# \"Hello, John!\"\n# \"Hello, Eric!\"\n# \"Hello, Terry!\"\n# \"Hello, Michael!\""
},
{
    "error_id": "comparison-with-callable",
    "problematic_code": "def function_returning_a_fruit() -> str:\nreturn \"orange\"\n\n\ndef is_an_orange(fruit: str = \"apple\"):\n# apple == <function function_returning_a_fruit at 0x7f343ff0a1f0>\nreturn fruit == function_returning_a_fruit  # [comparison-with-callable]",
    "correct_code": "def function_returning_a_fruit() -> str:\nreturn \"orange\"\n\n\ndef is_an_orange(fruit: str = \"apple\"):\n# apple == orange\nreturn fruit == function_returning_a_fruit()"
},
{
    "error_id": "confusing-with-statement",
    "problematic_code": "with open(\"file.txt\", \"w\") as fh1, fh2:  # [confusing-with-statement]\npass",
    "correct_code": "with open(\"file.txt\", \"w\", encoding=\"utf8\") as fh1:\nwith open(\"file.txt\", \"w\", encoding=\"utf8\") as fh2:\npass"
},
{
    "error_id": "consider-ternary-expression",
    "problematic_code": "x, y = input(), input()\nif x >= y:  # [consider-ternary-expression]\nmaximum = x\nelse:\nmaximum = y",
    "correct_code": "x, y = input(), input()\nmaximum = x if x >= y else y"
},
{
    "error_id": "contextmanager-generator-missing-cleanup",
    "problematic_code": "import contextlib\n\n\n@contextlib.contextmanager\ndef cm():\ncontextvar = \"acquired context\"\nprint(\"cm enter\")\nyield contextvar\nprint(\"cm exit\")\n\n\ndef genfunc_with_cm():\nwith cm() as context:  # [contextmanager-generator-missing-cleanup]\nyield context * 2",
    "correct_code": "import contextlib\n\n\n@contextlib.contextmanager\ndef good_cm_except():\ncontextvar = \"acquired context\"\nprint(\"good cm enter\")\ntry:\nyield contextvar\nexcept GeneratorExit:\nprint(\"good cm exit\")\n\n\ndef genfunc_with_cm():\nwith good_cm_except() as context:\nyield context * 2\n\n\ndef genfunc_with_discard():\nwith good_cm_except():\nyield \"discarded\"\n\n\n@contextlib.contextmanager\ndef good_cm_yield_none():\nprint(\"good cm enter\")\nyield\nprint(\"good cm exit\")\n\n\ndef genfunc_with_none_yield():\nwith good_cm_yield_none() as var:\nprint(var)\nyield \"constant yield\"\n\n\n@contextlib.contextmanager\ndef good_cm_finally():\ncontextvar = \"acquired context\"\nprint(\"good cm enter\")\ntry:\nyield contextvar\nfinally:\nprint(\"good cm exit\")\n\n\ndef good_cm_finally_genfunc():\nwith good_cm_finally() as context:\nyield context * 2\n\n\n@contextlib.contextmanager\ndef good_cm_no_cleanup():\ncontextvar = \"acquired context\"\nprint(\"cm enter\")\nyield contextvar\n\n\ndef good_cm_no_cleanup_genfunc():\nwith good_cm_no_cleanup() as context:\nyield context * 2"
},
{
    "error_id": "dangerous-default-value",
    "problematic_code": "def whats_on_the_telly(penguin=[]):  # [dangerous-default-value]\npenguin.append(\"property of the zoo\")\nreturn penguin",
    "correct_code": "def whats_on_the_telly(penguin=None):\nif penguin is None:\npenguin = []\npenguin.append(\"property of the zoo\")\nreturn penguin"
},
{
    "error_id": "deprecated-argument",
    "problematic_code": "int(x=1)  # [deprecated-argument]",
    "correct_code": "int(1)"
},
{
    "error_id": "deprecated-attribute",
    "problematic_code": "from configparser import ParsingError\n\nerr = ParsingError(\"filename\")\nsource = err.filename  # [deprecated-attribute]",
    "correct_code": "from configparser import ParsingError\n\nerr = ParsingError(\"filename\")\nsource = err.source"
},
{
    "error_id": "deprecated-class",
    "problematic_code": "from collections import Iterable  # [deprecated-class]",
    "correct_code": "from collections.abc import Iterable"
},
{
    "error_id": "deprecated-decorator",
    "problematic_code": "import abc\n\n\nclass Animal:\n@abc.abstractclassmethod  # [deprecated-decorator]\ndef breath(cls):\npass",
    "correct_code": "import abc\n\n\nclass Animal:\n@abc.classmethod\n@abc.abstractmethod\ndef breath(cls):\npass"
},
{
    "error_id": "deprecated-method",
    "problematic_code": "import logging\n\nlogging.warn(\"I'm coming, world !\")  # [deprecated-method]",
    "correct_code": "import logging\n\nlogging.warning(\"I'm coming, world !\")"
},
{
    "error_id": "deprecated-module",
    "problematic_code": "import distutils  # [deprecated-module]\n\nimport whatever_you_want  # [deprecated-module]",
    "correct_code": "import setuptools\nimport whatever_replacement_you_want"
},
{
    "error_id": "deprecated-typing-alias",
    "problematic_code": "import typing\n\nitem_to_number_of_item: typing.Dict[str, int]  # [deprecated-typing-alias]",
    "correct_code": "item_to_number_of_item: dict[str, int]"
},
{
    "error_id": "differing-param-doc",
    "problematic_code": "def add(x, y):  # [differing-param-doc]\n\"\"\"Add two numbers.\n\n:param int x: x value.\n:param int z: z value.\n\"\"\"\n\nreturn x + y",
    "correct_code": "def add(x, y):\n\"\"\"Add two numbers.\n\n:param int x: x value.\n:param int y: y value.\n\"\"\"\n\nreturn x + y"
},
{
    "error_id": "differing-type-doc",
    "problematic_code": "def add(x: int, y: int):  # [differing-type-doc]\n\"\"\"Add two numbers.\n\n:param int xy: x value.\n:param str y: y value.\n\"\"\"\n\nreturn x + y",
    "correct_code": "def add(x, y):\n\"\"\"Add two numbers.\n\n:param int x: x value.\n:param int y: y value.\n\"\"\"\n\nreturn x + y"
},
{
    "error_id": "duplicate-except",
    "problematic_code": "try:\n1 / 0\nexcept ZeroDivisionError:\npass\nexcept ZeroDivisionError:  # [duplicate-except]\npass",
    "correct_code": "try:\n1 / 0\nexcept ZeroDivisionError:\npass"
},
{
    "error_id": "duplicate-key",
    "problematic_code": "test_score = {\"Mathematics\": 85, \"Biology\": 90, \"Mathematics\": 75}  # [duplicate-key]",
    "correct_code": "test_score = {\"Mathematics\": 85, \"Biology\": 90, \"History\": 75}"
},
{
    "error_id": "duplicate-string-formatting-argument",
    "problematic_code": "# pylint: disable=missing-docstring, consider-using-f-string\n\nSEE = \"see \ud83d\udc40\"\nSEA = \"sea \ud83c\udf0a\"\n\n# +1: [duplicate-string-formatting-argument,duplicate-string-formatting-argument]\nCONST = \"\"\"\nA sailor went to {}, {}, {}\nTo {} what he could {}, {}, {}\nBut all that he could {}, {}, {}\nWas the bottom of the deep blue {}, {}, {}!\n\"\"\".format(\nSEA,\nSEA,\nSEA,\nSEE,\nSEE,\nSEE,\nSEE,\nSEE,\nSEE,\nSEE,\nSEA,\nSEA,\nSEA,\n)",
    "correct_code": "# pylint: disable=missing-docstring, consider-using-f-string\n\nSEE = \"see \ud83d\udc40\"\nSEA = \"sea \ud83c\udf0a\"\n\nCONST = \"\"\"\nA sailor went to {sea}, {sea}, {sea}\nTo {see} what he could {see}, {see}, {see}\nBut all that he could {see}, {see}, {see}\nWas the bottom of the deep blue {sea}, {sea}, {sea}!\n\"\"\".format(\nsea=SEA, see=SEE\n)"
},
{
    "error_id": "duplicate-value",
    "problematic_code": "incorrect_set = {\"value1\", 23, 5, \"value1\"}  # [duplicate-value]",
    "correct_code": "correct_set = {\"value1\", 23, 5}"
},
{
    "error_id": "eq-without-hash",
    "problematic_code": "class Fruit:  # [eq-without-hash]\ndef __init__(self) -> None:\nself.name = \"apple\"\n\ndef __eq__(self, other: object) -> bool:\nreturn isinstance(other, Fruit) and other.name == self.name",
    "correct_code": "class Fruit:\ndef __init__(self) -> None:\nself.name = \"apple\"\n\ndef __eq__(self, other: object) -> bool:\nreturn isinstance(other, Fruit) and other.name == self.name\n\ndef __hash__(self) -> int:\nreturn hash(self.name)"
},
{
    "error_id": "eval-used",
    "problematic_code": "eval(\"[1, 2, 3]\")  # [eval-used]",
    "correct_code": "from ast import literal_eval\n\nliteral_eval(\"[1, 2, 3]\")"
},
{
    "error_id": "exec-used",
    "problematic_code": "username = \"Ada\"\ncode_to_execute = f\"\"\"input('Enter code to be executed please, {username}: ')\"\"\"\nprogram = exec(code_to_execute)  # [exec-used]\nexec(program)  # [exec-used]",
    "correct_code": "def get_user_code(name):\nreturn input(f\"Enter code to be executed please, {name}: \")\n\n\nusername = \"Ada\"\nallowed_globals = {\"__builtins__\": None}\nallowed_locals = {\"print\": print}\n# pylint: disable-next=exec-used\nexec(get_user_code(username), allowed_globals, allowed_locals)"
},
{
    "error_id": "expression-not-assigned",
    "problematic_code": "str(42) == \"42\"  # [expression-not-assigned]",
    "correct_code": "are_equal: bool = str(42) == \"42\""
},
{
    "error_id": "f-string-without-interpolation",
    "problematic_code": "x = 1\ny = 2\nprint(f\"x + y = x + y\")  # [f-string-without-interpolation]",
    "correct_code": "x = 1\ny = 2\nprint(f\"{x} + {y} = {x + y}\")"
},
{
    "error_id": "fixme",
    "problematic_code": "# TODO: We should fix this at some point  # [fixme]",
    "correct_code": "# The issue was added to the bug tracker: no longer need the comment"
},
{
    "error_id": "forgotten-debug-statement",
    "problematic_code": "import pdb\n\n\ndef find_the_treasure(clues):\nfor clue in clues:\npdb.set_trace()  # [forgotten-debug-statement]\nif \"treasure\" in clue:\nreturn True\nreturn False\n\n\ntreasure_hunt = [\n\"Dead Man's Chest\",\n\"X marks the spot\",\n\"The treasure is buried near the palm tree\",\n]\nfind_the_treasure(treasure_hunt)",
    "correct_code": "def find_the_treasure(clues):\nfor clue in clues:\nif \"treasure\" in clue:\nreturn True\nreturn False\n\n\ntreasure_hunt = [\n\"Dead Man's Chest\",\n\"X marks the spot\",\n\"The treasure is buried near the palm tree\",\n]\nfind_the_treasure(treasure_hunt)"
},
{
    "error_id": "format-combined-specification",
    "problematic_code": "print(\"{} {1}\".format(\"hello\", \"world\"))  # [format-combined-specification]",
    "correct_code": "print(\"{0} {1}\".format(\"hello\", \"world\"))"
},
{
    "error_id": "format-string-without-interpolation",
    "problematic_code": "print(\"number\".format(1))  # [format-string-without-interpolation]",
    "correct_code": "print(\"number: {}\".format(1))"
},
{
    "error_id": "global-at-module-level",
    "problematic_code": "price = 25\nglobal price  # [global-at-module-level]",
    "correct_code": "price = 25"
},
{
    "error_id": "global-statement",
    "problematic_code": "var = 1\n\n\ndef foo():\nglobal var  # [global-statement]\nvar = 10\nprint(var)\n\n\nfoo()\nprint(var)",
    "correct_code": "var = 1\n\n\ndef foo():\nprint(var)\nreturn 10\n\n\nvar = foo()\nprint(var)"
},
{
    "error_id": "global-variable-not-assigned",
    "problematic_code": "TOMATO = \"black cherry\"\n\n\ndef update_tomato():\nglobal TOMATO  # [global-variable-not-assigned]\nprint(TOMATO)",
    "correct_code": "TOMATO = \"black cherry\"\n\n\ndef update_tomato():\nglobal TOMATO\nTOMATO = \"moneymaker\""
},
{
    "error_id": "global-variable-undefined",
    "problematic_code": "def update_tomato():\nglobal TOMATO  # [global-variable-undefined]\nTOMATO = \"moneymaker\"",
    "correct_code": "TOMATO = \"black cherry\"\n\n\ndef update_tomato():\nglobal TOMATO\nTOMATO = \"moneymaker\""
},
{
    "error_id": "implicit-flag-alias",
    "problematic_code": "from enum import IntFlag\n\n\nclass FilePermissions(IntFlag):\nREAD = 1\nWRITE = 2\nEXECUTE = 3  # [implicit-flag-alias]",
    "correct_code": "from enum import IntFlag\n\n\nclass FilePermissions(IntFlag):\nREAD = 1\nWRITE = 2\nEXECUTE = 4"
},
{
    "error_id": "implicit-str-concat",
    "problematic_code": "x = [\"a\" \"b\"]  # [implicit-str-concat]",
    "correct_code": "with open(\"hello.txt\" \"r\") as f:  # [implicit-str-concat]\nprint(f.read())"
},
{
    "error_id": "import-self",
    "problematic_code": "from my_file import a_function  # [import-self]\n\ndef a_function():\npass",
    "correct_code": "def a_function():\npass"
},
{
    "error_id": "inconsistent-quotes",
    "problematic_code": "import datetime\n\nprint('Current year: ', datetime.date.today().strftime(\"%Y\")) # [inconsistent-quotes]",
    "correct_code": "import datetime\n\nprint(\"Current year: \", datetime.date.today().strftime(\"%Y\"))"
},
{
    "error_id": "invalid-envvar-default",
    "problematic_code": "import os\n\nenv = os.getenv(\"SECRET_KEY\", 1)  # [invalid-envvar-default]",
    "correct_code": "import os\n\nenv = os.getenv(\"SECRET_KEY\", \"1\")"
},
{
    "error_id": "invalid-format-index",
    "problematic_code": "not_enough_fruits = [\"apple\"]\nprint('The second fruit is a {fruits[1]}'.format(fruits=not_enough_fruits))  # [invalid-format-index]",
    "correct_code": "enough_fruits = [\"apple\", \"banana\"]\nprint(\"The second fruit is a {fruits[1]}\".format(fruits=enough_fruits))"
},
{
    "error_id": "invalid-overridden-method",
    "problematic_code": "class Fruit:\nasync def bore(self, insect):\ninsect.eat(self)\n\n\nclass Apple(Fruit):\ndef bore(self, insect):  # [invalid-overridden-method]\ninsect.eat(self)",
    "correct_code": "class Fruit:\nasync def bore(self, insect):\ninsect.eat(self)\n\n\nclass Apple(Fruit):\nasync def bore(self, insect):\ninsect.eat(self)"
},
{
    "error_id": "isinstance-second-argument-not-valid-type",
    "problematic_code": "isinstance(\"apples and oranges\", hex)  # [isinstance-second-argument-not-valid-type]",
    "correct_code": "isinstance(\"apples and oranges\", str)"
},
{
    "error_id": "keyword-arg-before-vararg",
    "problematic_code": "def func(x=None, *args):  # [keyword-arg-before-vararg]\nreturn [x, *args]",
    "correct_code": "def func(*args, x=None):\nreturn [*args, x]"
},
{
    "error_id": "kwarg-superseded-by-positional-arg",
    "problematic_code": "def print_name(name=\"Sarah\", /, **kwds):\nprint(name)\n\n\nprint_name(name=\"Jacob\")  # [kwarg-superseded-by-positional-arg]\n# Will print \"Sarah\"",
    "correct_code": "def print_name(name=\"Sarah\", /, **kwds):\nprint(name)\n\n\nprint_name(\"Jacob\")\n# Will print \"Jacob\""
},
{
    "error_id": "logging-format-interpolation",
    "problematic_code": "import logging\nimport sys\n\n# +1: [logging-format-interpolation]\nlogging.error(\"Python version: {}\".format(sys.version))",
    "correct_code": "import logging\nimport sys\n\nlogging.error(\"Python version: %s\", sys.version)"
},
{
    "error_id": "logging-fstring-interpolation",
    "problematic_code": "import logging\nimport sys\n\nlogging.error(f\"Python version: {sys.version}\")  # [logging-fstring-interpolation]",
    "correct_code": "import logging\nimport sys\n\nlogging.error(\"Python version: %s\", sys.version)"
},
{
    "error_id": "logging-not-lazy",
    "problematic_code": "import logging\n\ntry:\nfunction()\nexcept Exception as e:\nlogging.error(\"Error occurred: %s\" % e)  # [logging-not-lazy]\nraise",
    "correct_code": "import logging\n\ntry:\nfunction()\nexcept Exception as e:\nlogging.error(\"Error occurred: %s\", e)\nraise"
},
{
    "error_id": "lost-exception",
    "problematic_code": "class FasterThanTheSpeedOfLightError(ZeroDivisionError):\ndef __init__(self):\nsuper().__init__(\"You can't go faster than the speed of light !\")\n\n\ndef calculate_speed(distance: float, time: float) -> float:\ntry:\nreturn distance / time\nexcept ZeroDivisionError as e:\nraise FasterThanTheSpeedOfLightError() from e\nfinally:\nreturn 299792458  # [lost-exception]",
    "correct_code": "class FasterThanTheSpeedOfLightError(ZeroDivisionError):\ndef __init__(self):\nsuper().__init__(\"You can't go faster than the speed of light !\")\n\n\ndef calculate_speed(distance: float, time: float) -> float:\ntry:\nreturn distance / time\nexcept ZeroDivisionError as e:\nraise FasterThanTheSpeedOfLightError() from e"
},
{
    "error_id": "method-cache-max-size-none",
    "problematic_code": "import functools\n\n\nclass Fibonnaci:\ndef __init__(self):\nself.result = []\n\n@functools.lru_cache(maxsize=None)  # [method-cache-max-size-none]\ndef fibonacci(self, n):\nif n in {0, 1}:\nself.result.append(n)\nself.result.append(self.fibonacci(n - 1) + self.fibonacci(n - 2))",
    "correct_code": "import functools\n\n\n@functools.cache\ndef cached_fibonacci(n):\nif n in {0, 1}:\nreturn n\nreturn cached_fibonacci(n - 1) + cached_fibonacci(n - 2)\n\n\nclass Fibonnaci:\ndef __init__(self):\nself.result = []\n\ndef fibonacci(self, n):\nself.result.append(cached_fibonacci(n))"
},
{
    "error_id": "misplaced-future",
    "problematic_code": "import sys\n\nfrom __future__ import print_function  # [misplaced-future]",
    "correct_code": "from __future__ import print_function\n\nimport sys"
},
{
    "error_id": "missing-any-param-doc",
    "problematic_code": "def puppies(head, tail):  # [missing-any-param-doc]\n\"\"\"Print puppy's details.\"\"\"\nprint(head, tail)",
    "correct_code": "def puppies(head: str, tail: str):\n\"\"\"Print puppy's details.\n\n:param head: description of the head of the dog\n:param tail: description of the tail of the dog\n\"\"\"\nprint(head, tail)"
},
{
    "error_id": "missing-format-argument-key",
    "problematic_code": "print(\"My name is {first} {last}\".format(first=\"John\"))  # [missing-format-argument-key]",
    "correct_code": "print(\"My name is {first} {last}\".format(first=\"John\", last=\"Wick\"))"
},
{
    "error_id": "missing-format-attribute",
    "problematic_code": "print(\"{0.real}\".format(\"1\"))  # [missing-format-attribute]",
    "correct_code": "print(\"{0.real}\".format(1))"
},
{
    "error_id": "missing-param-doc",
    "problematic_code": "def integer_sum(a: int, b):  # [missing-param-doc]\n\"\"\"Returns sum of two integers\n:param a: first integer\n\"\"\"\nreturn a + b",
    "correct_code": "def integer_sum(a: int, b: int):\n\"\"\"Returns sum of two integers\n:param a: first integer\n:param b: second integer\n\"\"\"\nreturn a + b"
},
{
    "error_id": "missing-parentheses-for-call-in-test",
    "problematic_code": "import random\n\n\ndef is_it_a_good_day():\nreturn random.choice([True, False])\n\n\nif is_it_a_good_day:  # [missing-parentheses-for-call-in-test]\nprint(\"Today is a good day!\")",
    "correct_code": "import random\n\n\ndef is_it_a_good_day():\nreturn random.choice([True, False])\n\n\nif is_it_a_good_day():\nprint(\"Today is a good day!\")"
},
{
    "error_id": "missing-raises-doc",
    "problematic_code": "def integer_sum(a: int, b: int):  # [missing-raises-doc]\n\"\"\"Returns sum of two integers\n:param a: first integer\n:param b: second integer\n\"\"\"\nif not (isinstance(a, int) and isinstance(b, int)):\nraise ValueError(\"Function supports only integer parameters.\")\nreturn a + b",
    "correct_code": "def integer_sum(a: int, b: int):\n\"\"\"Returns sum of two integers\n:param a: first integer\n:param b: second integer\n:raises ValueError: One of the parameters is not an integer.\n\"\"\"\nif not (isinstance(a, int) and isinstance(b, int)):\nraise ValueError(\"Function supports only integer parameters.\")\nreturn a + b"
},
{
    "error_id": "missing-return-doc",
    "problematic_code": "def integer_sum(a: int, b: int):  # [missing-return-doc]\n\"\"\"Returns sum of two integers\n:param a: first integer\n:param b: second integer\n\"\"\"\nreturn a + b",
    "correct_code": "def integer_sum(a: int, b: int) -> int:\n\"\"\"Returns sum of two integers\n:param a: first integer\n:param b: second integer\n:return: sum of parameters a and b\n\"\"\"\nreturn a + b"
},
{
    "error_id": "missing-return-type-doc",
    "problematic_code": "def integer_sum(a: int, b: int):  # [missing-return-type-doc]\n\"\"\"Returns sum of two integers\n:param a: first integer\n:param b: second integer\n:return: sum of parameters a and b\n\"\"\"\nreturn a + b",
    "correct_code": "def integer_sum(a: int, b: int) -> int:\n\"\"\"Returns sum of two integers\n:param a: first integer\n:param b: second integer\n:return: sum of parameters a and b\n\"\"\"\nreturn a + b"
},
{
    "error_id": "missing-timeout",
    "problematic_code": "import requests\n\nrequests.post(\"http://localhost\")  # [missing-timeout]",
    "correct_code": "import requests\n\nrequests.post(\"http://localhost\", timeout=10)"
},
{
    "error_id": "missing-type-doc",
    "problematic_code": "def integer_sum(a: int, b):  # [missing-type-doc]\n\"\"\"Returns sum of two integers\n:param a: first integer\n:param b: second integer\n\"\"\"\nreturn a + b",
    "correct_code": "def integer_sum(a: int, b: int):\n\"\"\"Returns sum of two integers\n:param a: first integer\n:param b: second integer\n\"\"\"\nreturn a + b"
},
{
    "error_id": "missing-yield-doc",
    "problematic_code": "def even_number_under(n: int):  # [missing-yield-doc]\n\"\"\"Prints even numbers smaller than n.\nArgs:\nn: Upper limit of even numbers.\n\"\"\"\nfor i in range(n):\nif i % 2 == 1:\ncontinue\nyield i",
    "correct_code": "from typing import Iterator\n\n\ndef even_number_under(n: int) -> Iterator[int]:\n\"\"\"Prints even numbers smaller than n.\nArgs:\nn: Upper limit of even numbers.\n\nYields:\neven numbers\n\"\"\"\nfor i in range(n):\nif i % 2 == 1:\ncontinue\nyield i"
},
{
    "error_id": "missing-yield-type-doc",
    "problematic_code": "def even_number_under(n: int):  # [missing-yield-type-doc]\n\"\"\"Prints even numbers smaller than n.\nArgs:\nn: Upper limit of even numbers.\n\nYields:\neven numbers\n\"\"\"\nfor i in range(n):\nif i % 2 == 1:\ncontinue\nyield i",
    "correct_code": "from typing import Iterator\n\n\ndef even_number_under(n: int) -> Iterator[int]:\n\"\"\"Prints even numbers smaller than n.\nArgs:\nn: Upper limit of even numbers.\n\nYields:\neven numbers\n\"\"\"\nfor i in range(n):\nif i % 2 == 1:\ncontinue\nyield i"
},
{
    "error_id": "modified-iterating-list",
    "problematic_code": "fruits = [\"apple\", \"orange\", \"mango\"]\nfor fruit in fruits:\nfruits.append(\"pineapple\")  # [modified-iterating-list]",
    "correct_code": "fruits = [\"apple\", \"orange\", \"mango\"]\nfor fruit in fruits.copy():\nfruits.append(\"pineapple\")"
},
{
    "error_id": "multiple-constructor-doc",
    "problematic_code": "class Point:  # [multiple-constructor-doc]\n\"\"\"Represents a point in the xy-coordinate plane.\n\n:param x: coordinate\n:param y: coordinate\n\"\"\"\n\ndef __init__(self, x, y):\n\"\"\"Represents a point in the xy-coordinate plane.\n\n:param x: coordinate\n:param y: coordinate\n\"\"\"\nself.x = x\nself.y = y",
    "correct_code": "class Point:\ndef __init__(self, x, y):\n\"\"\"Represents a point in the xy-coordinate plane.\n\n:param x: x coordinate\n:param y: y coordinate\n\"\"\"\nself.x = x\nself.y = y"
},
{
    "error_id": "named-expr-without-context",
    "problematic_code": "(a := 42)  # [named-expr-without-context]",
    "correct_code": "if a := 42:\nprint(\"Success\")"
},
{
    "error_id": "nan-comparison",
    "problematic_code": "import numpy as np\n\n\ndef both_nan(x, y) -> bool:\nreturn x == np.NaN and y == float(\"nan\")  # [nan-comparison, nan-comparison]",
    "correct_code": "import numpy as np\n\n\ndef both_nan(x, y) -> bool:\nreturn np.isnan(x) and np.isnan(y)"
},
{
    "error_id": "nested-min-max",
    "problematic_code": "print(min(1, min(2, 3)))  # [nested-min-max]",
    "correct_code": "print(min(1, 2, 3))"
},
{
    "error_id": "non-ascii-file-name",
    "problematic_code": "# [non-ascii-file-name]",
    "correct_code": "# [non-ascii-file-name]"
},
{
    "error_id": "non-parent-init-called",
    "problematic_code": "class Animal:\ndef __init__(self):\nself.is_multicellular = True\n\n\nclass Vertebrate(Animal):\ndef __init__(self):\nsuper().__init__()\nself.has_vertebrae = True\n\n\nclass Cat(Vertebrate):\ndef __init__(self):\nAnimal.__init__(self)  # [non-parent-init-called]\nself.is_adorable = True",
    "correct_code": "class Animal:\ndef __init__(self):\nself.is_multicellular = True\n\n\nclass Vertebrate(Animal):\ndef __init__(self):\nsuper().__init__()\nself.has_vertebrae = True\n\n\nclass Cat(Vertebrate):\ndef __init__(self):\nsuper().__init__()\nself.is_adorable = True"
},
{
    "error_id": "non-str-assignment-to-dunder-name",
    "problematic_code": "class Fruit:\npass\n\n\nFruit.__name__ = 1  # [non-str-assignment-to-dunder-name]",
    "correct_code": "class Fruit:\npass\n\n\nFruit.__name__ = \"FRUIT\""
},
{
    "error_id": "overlapping-except",
    "problematic_code": "def divide_x_by_y(x: float, y: float):\ntry:\nprint(x / y)\nexcept (ArithmeticError, FloatingPointError) as e:  # [overlapping-except]\nprint(f\"There was an issue: {e}\")",
    "correct_code": "def divide_x_by_y(x: float, y: float):\ntry:\nprint(x / y)\nexcept FloatingPointError as e:\nprint(f\"There was a FloatingPointError: {e}\")\nexcept ArithmeticError as e:\n# FloatingPointError  were already caught at this point\nprint(f\"There was an OverflowError or a ZeroDivisionError: {e}\")"
},
{
    "error_id": "overridden-final-method",
    "problematic_code": "from typing import final\n\n\nclass Animal:\n@final\ndef can_breathe(self):\nreturn True\n\n\nclass Cat(Animal):\ndef can_breathe(self):  # [overridden-final-method]\npass",
    "correct_code": "from typing import final\n\n\nclass Animal:\n@final\ndef can_breathe(self):\nreturn True\n\n\nclass Cat(Animal):\ndef can_purr(self):\nreturn True"
},
{
    "error_id": "pointless-exception-statement",
    "problematic_code": "Exception(\"This exception is a statement.\")  # [pointless-exception-statement]",
    "correct_code": "raise Exception(\"This will raise.\")"
},
{
    "error_id": "pointless-statement",
    "problematic_code": "[1, 2, 3]  # [pointless-statement]",
    "correct_code": "NUMBERS = [1, 2, 3]\n\nprint(NUMBERS)"
},
{
    "error_id": "pointless-string-statement",
    "problematic_code": "\"\"\"This is a docstring which describes the module\"\"\"\n\n\"\"\"This is not a docstring\"\"\"  # [pointless-string-statement]",
    "correct_code": "\"\"\"This is a docstring which describes the module\"\"\"\n\n# This is comment which describes a particular part of the module."
},
{
    "error_id": "possibly-unused-variable",
    "problematic_code": "def choose_fruits(fruits):\nprint(fruits)\ncolor = \"red\"  # [possibly-unused-variable]\nreturn locals()",
    "correct_code": "def choose_fruits(fruits):\ncurrent_locals = locals()\nprint(fruits)\ncolor = \"red\"\nprint(color)\nreturn current_locals"
},
{
    "error_id": "preferred-module",
    "problematic_code": "import urllib  # [preferred-module]",
    "correct_code": "import requests"
},
{
    "error_id": "protected-access",
    "problematic_code": "class Worm:\ndef __swallow(self):\npass\n\n\njim = Worm()\njim.__swallow()  # [protected-access]",
    "correct_code": "class Worm:\ndef __swallow(self):\npass\n\ndef eat(self):\nreturn self.__swallow()\n\n\njim = Worm()\njim.eat()"
},
{
    "error_id": "raise-missing-from",
    "problematic_code": "try:\n1 / 0\nexcept ZeroDivisionError as e:\nraise ValueError(\"Rectangle Area cannot be zero\")  # [raise-missing-from]",
    "correct_code": "try:\n1 / 0\nexcept ZeroDivisionError as e:\nraise ValueError(\"Rectangle Area cannot be zero\") from e"
},
{
    "error_id": "raising-format-tuple",
    "problematic_code": "raise RuntimeError(\"This looks wrong %s %s\", (\"a\", \"b\"))  # [raising-format-tuple]",
    "correct_code": "raise RuntimeError(\"This looks wrong %s %s\" % (\"a\", \"b\"))"
},
{
    "error_id": "redeclared-assigned-name",
    "problematic_code": "FIRST, FIRST = (1, 2)  # [redeclared-assigned-name]",
    "correct_code": "FIRST, SECOND = (1, 2)"
},
{
    "error_id": "redefined-builtin",
    "problematic_code": "def map():  # [redefined-builtin]\npass",
    "correct_code": "def map_iterable():\npass"
},
{
    "error_id": "redefined-loop-name",
    "problematic_code": "def normalize_names(names):\nfor name in names:\nname = name.lower()  # [redefined-loop-name]",
    "correct_code": "def normalize_names(names):\nfor name in names:\nlowercased_name = name.lower()"
},
{
    "error_id": "redefined-outer-name",
    "problematic_code": "count = 10\n\n\ndef count_it(count):  # [redefined-outer-name]\nfor i in range(count):\nprint(i)",
    "correct_code": "count = 10\n\n\ndef count_it(limit):\nfor i in range(limit):\nprint(i)"
},
{
    "error_id": "redefined-slots-in-subclass",
    "problematic_code": "class Base:\n__slots__ = (\"a\", \"b\")\n\n\nclass Subclass(Base):\n__slots__ = (\"a\", \"d\")  # [redefined-slots-in-subclass]",
    "correct_code": "class Base:\n__slots__ = (\"a\", \"b\")\n\n\nclass Subclass(Base):\n__slots__ = (\"d\",)"
},
{
    "error_id": "redundant-returns-doc",
    "problematic_code": "def print_fruits(fruits):  # [redundant-returns-doc]\n\"\"\"Print list of fruits\n\nReturns\n-------\nstr\n\"\"\"\nprint(fruits)\nreturn None",
    "correct_code": "def print_fruits(fruits):\n\"\"\"Print list of fruits\n\nReturns\n-------\nstr\n\"\"\"\nprint(fruits)\nreturn \",\".join(fruits)"
},
{
    "error_id": "redundant-u-string-prefix",
    "problematic_code": "def print_fruit():\nprint(u\"Apple\")  # [redundant-u-string-prefix]",
    "correct_code": "def print_fruit():\nprint(\"Apple\")"
},
{
    "error_id": "redundant-unittest-assert",
    "problematic_code": "import unittest\n\n\nclass DummyTestCase(unittest.TestCase):\ndef test_dummy(self):\nself.assertTrue(\"foo\")  # [redundant-unittest-assert]",
    "correct_code": "import unittest\n\n\nclass DummyTestCase(unittest.TestCase):\ndef test_dummy(self):\nactual = \"test_result\"\nself.assertEqual(actual, \"expected\")"
},
{
    "error_id": "redundant-yields-doc",
    "problematic_code": "def give_fruits(fruits):  # [redundant-yields-doc]\n\"\"\"Something about fruits\n\nYields\n-------\nlist\nfruits\n\"\"\"\nreturn fruits",
    "correct_code": "def give_fruits(fruits):\n\"\"\"Something about fruits\n\nYields\n-------\nstr\nfruit\n\"\"\"\nfor fruit in fruits:\nyield fruit"
},
{
    "error_id": "reimported",
    "problematic_code": "import re\nimport re  # [reimported]",
    "correct_code": "import re"
},
{
    "error_id": "return-in-finally",
    "problematic_code": "def second_favorite():\nfruits = [\"kiwi\", \"pineapple\"]\ntry:\nreturn fruits[1]\nfinally:\n# because of this `return` statement, this function will always return \"kiwi\"\nreturn fruits[0]  # [return-in-finally]",
    "correct_code": "def second_favorite():\nfruits = [\"kiwi\", \"pineapple\"]\ntry:\nreturn fruits[1]\nexcept KeyError:\n...\n\nreturn fruits[0]"
},
{
    "error_id": "self-assigning-variable",
    "problematic_code": "year = 2000\nyear = year  # [self-assigning-variable]",
    "correct_code": "year = 2000"
},
{
    "error_id": "self-cls-assignment",
    "problematic_code": "class Fruit:\n@classmethod\ndef list_fruits(cls):\ncls = \"apple\"  # [self-cls-assignment]\n\ndef print_color(self, *colors):\nself = \"red\"  # [self-cls-assignment]\ncolor = colors[1]\nprint(color)",
    "correct_code": "class Fruit:\n@classmethod\ndef list_fruits(cls):\nfruit = \"apple\"\nprint(fruit)\n\ndef print_color(self, *colors):\ncolor = colors[1]\nprint(color)"
},
{
    "error_id": "shadowed-import",
    "problematic_code": "from pathlib import Path\n\nimport FastAPI.Path as Path  # [shadowed-import]",
    "correct_code": "from pathlib import Path\n\nimport FastAPI.Path as FastApiPath"
},
{
    "error_id": "shallow-copy-environ",
    "problematic_code": "import copy\nimport os\n\ncopied_env = copy.copy(os.environ)  # [shallow-copy-environ]",
    "correct_code": "import os\n\ncopied_env = os.environ.copy()"
},
{
    "error_id": "signature-differs",
    "problematic_code": "class Animal:\ndef run(self, distance=0):\nprint(f\"Ran {distance} km!\")\n\n\nclass Dog(Animal):\ndef run(self, distance):  # [signature-differs]\nsuper(Animal, self).run(distance)\nprint(\"Fetched that stick, wuff !\")",
    "correct_code": "class Animal:\ndef run(self, distance=0):\nprint(f\"Ran {distance} km!\")\n\n\nclass Dog(Animal):\ndef run(self, distance=0):\nsuper(Animal, self).run(distance)\nprint(\"Fetched that stick, wuff !\")"
},
{
    "error_id": "subclassed-final-class",
    "problematic_code": "from typing import final\n\n\n@final\nclass PlatypusData:\n\"\"\"General Platypus data.\"\"\"\n\naverage_length = 46\naverage_body_temperature = 32\n\n\nclass FluorescentPlaytipus(PlatypusData):  # [subclassed-final-class]\n\"\"\"Playtipus with fluorescent fur.\"\"\"",
    "correct_code": "from typing import final\n\n\n@final\nclass PlatypusData:\n\"\"\"General Platypus data.\"\"\"\n\naverage_length = 46\naverage_body_temperature = 32\n\n\ndef print_average_length_platypus():\noutput = f\"The average length of a platypus is: {PlatypusData.average_length}cm\"\nprint(output)"
},
{
    "error_id": "subprocess-popen-preexec-fn",
    "problematic_code": "import subprocess\n\n\ndef foo():\npass\n\n\nsubprocess.Popen(preexec_fn=foo)  # [subprocess-popen-preexec-fn]",
    "correct_code": "import subprocess\n\nsubprocess.Popen()"
},
{
    "error_id": "subprocess-run-check",
    "problematic_code": "import subprocess\n\nproc = subprocess.run([\"ls\"])  # [subprocess-run-check]",
    "correct_code": "import subprocess\n\nproc = subprocess.run([\"ls\"], check=False)"
},
{
    "error_id": "super-init-not-called",
    "problematic_code": "class Fruit:\ndef __init__(self, name=\"fruit\"):\nself.name = name\nprint(\"Creating a {self.name}\")\n\n\nclass Apple(Fruit):\ndef __init__(self):  # [super-init-not-called]\nprint(\"Creating an apple\")",
    "correct_code": "class Fruit:\ndef __init__(self, name=\"fruit\"):\nself.name = name\nprint(\"Creating a {self.name}\")\n\n\nclass Apple(Fruit):\ndef __init__(self):\nsuper().__init__(\"apple\")"
},
{
    "error_id": "super-without-brackets",
    "problematic_code": "class Soup:\n@staticmethod\ndef temp():\nprint(\"Soup is hot!\")\n\n\nclass TomatoSoup(Soup):\n@staticmethod\ndef temp():\nsuper.temp()  # [super-without-brackets]\nprint(\"But tomato soup is even hotter!\")",
    "correct_code": "class Soup:\n@staticmethod\ndef temp():\nprint(\"Soup is hot!\")\n\n\nclass TomatoSoup(Soup):\n@staticmethod\ndef temp():\nsuper().temp()\nprint(\"But tomato soup is even hotter!\")"
},
{
    "error_id": "too-many-try-statements",
    "problematic_code": "FRUITS = {\"apple\": 1, \"orange\": 10}\n\n\ndef pick_fruit(name):\ntry:  # [too-many-try-statements]\ncount = FRUITS[name]\ncount += 1\nprint(f\"Got fruit count {count}\")\nexcept KeyError:\nreturn",
    "correct_code": "FRUITS = {\"apple\": 1, \"orange\": 10}\n\n\ndef pick_fruit(name):\ntry:\ncount = FRUITS[name]\nexcept KeyError:\nreturn\n\ncount += 1\nprint(f\"Got fruit count {count}\")"
},
{
    "error_id": "try-except-raise",
    "problematic_code": "try:\n1 / 0\nexcept ZeroDivisionError as e:  # [try-except-raise]\nraise",
    "correct_code": "# The try except might be removed entirely:\n1 / 0"
},
{
    "error_id": "unbalanced-dict-unpacking",
    "problematic_code": "FRUITS = {\"apple\": 2, \"orange\": 3, \"mellon\": 10}\n\nfor fruit, price in FRUITS.values():  # [unbalanced-dict-unpacking]\nprint(fruit)",
    "correct_code": "FRUITS = {\"apple\": 2, \"orange\": 3, \"mellon\": 10}\n\nfor fruit, price in FRUITS.items():\nprint(fruit)"
},
{
    "error_id": "unbalanced-tuple-unpacking",
    "problematic_code": "fruits = (\"orange\", \"apple\", \"strawberry\", \"peer\")\norange, apple, strawberry = fruits  # [unbalanced-tuple-unpacking]",
    "correct_code": "fruits = (\"orange\", \"apple\", \"strawberry\", \"peer\")\norange, apple, *remaining_fruits = fruits"
},
{
    "error_id": "undefined-loop-variable",
    "problematic_code": "def find_even_number(numbers):\nfor x in numbers:\nif x % 2 == 0:\nbreak\nreturn x  # [undefined-loop-variable]",
    "correct_code": "def find_even_number(numbers):\nfor x in numbers:\nif x % 2:\nreturn x\nreturn None"
},
{
    "error_id": "unknown-option-value",
    "problematic_code": "# pylint: disable=missnig-docstring  # [unknown-option-value]",
    "correct_code": "# pylint: disable=missing-docstring"
},
{
    "error_id": "unnecessary-ellipsis",
    "problematic_code": "def my_function():\n\"\"\"My docstring\"\"\"\n...  # [unnecessary-ellipsis]",
    "correct_code": "def my_function():\n\"\"\"My docstring\"\"\""
},
{
    "error_id": "unnecessary-lambda",
    "problematic_code": "df.apply(lambda x: str(x))  # [unnecessary-lambda]",
    "correct_code": "function = lambda x: print(x)  # [unnecessary-lambda]\n\nfunction(\"Hello world !\")"
},
{
    "error_id": "unnecessary-pass",
    "problematic_code": "class DataEntryError(Exception):\n\"\"\"This exception is raised when a user has provided incorrect data.\"\"\"\n\npass  # [unnecessary-pass]",
    "correct_code": "class DataEntryError(Exception):\n\"\"\"This exception is raised when a user has provided incorrect data.\"\"\""
},
{
    "error_id": "unnecessary-semicolon",
    "problematic_code": "print(\"Hello World!\");  # [unnecessary-semicolon]",
    "correct_code": "print(\"Hello World!\")"
},
{
    "error_id": "unreachable",
    "problematic_code": "def say_hello():\nreturn True\nprint(\"Hello World!, Outside function.\")  # [unreachable]",
    "correct_code": "def say_hello():\nprint(\"Hello World!, Inside function.\")\nreturn True"
},
{
    "error_id": "unspecified-encoding",
    "problematic_code": "def foo(file_path):\nwith open(file_path) as file:  # [unspecified-encoding]\ncontents = file.read()",
    "correct_code": "def foo(file_path):\nwith open(file_path, encoding=\"utf-8\") as file:\ncontents = file.read()"
},
{
    "error_id": "unused-argument",
    "problematic_code": "def print_point(x, y):  # [unused-argument]\nprint(f\"Point is located at {x},{x}\")",
    "correct_code": "def print_point(x, y):\nprint(f\"Point is located at {x},{y}\")"
},
{
    "error_id": "unused-format-string-argument",
    "problematic_code": "print(\"{x} {y}\".format(x=1, y=2, z=3))  # [unused-format-string-argument]",
    "correct_code": "print(\"{x} {y} {z}\".format(x=1, y=2, z=3))"
},
{
    "error_id": "unused-format-string-key",
    "problematic_code": "\"The quick %(color)s fox jumps over the lazy dog.\" % {\n\"color\": \"brown\",\n\"action\": \"hops\",\n}\n# -4: [unused-format-string-key]",
    "correct_code": "\"The quick %(color)s fox %(action)s over the lazy dog.\" % {\n\"color\": \"brown\",\n\"action\": \"hops\",\n}"
},
{
    "error_id": "unused-import",
    "problematic_code": "from logging import getLogger\nfrom pathlib import Path  # [unused-import]\n\nLOGGER = getLogger(__name__)",
    "correct_code": "from logging import getLogger\n\nLOGGER = getLogger(__name__)"
},
{
    "error_id": "unused-private-member",
    "problematic_code": "class Fruit:\nFRUITS = {\"apple\": \"red\", \"orange\": \"orange\"}\n\ndef __print_color(self):  # [unused-private-member]\npass",
    "correct_code": "class Fruit:\nFRUITS = {\"apple\": \"red\", \"orange\": \"orange\"}\n\ndef __print_color(self, name, color):\nprint(f\"{name}: {color}\")\n\ndef print(self):\nfor fruit, color in self.FRUITS.items():\nself.__print_color(fruit, color)"
},
{
    "error_id": "unused-variable",
    "problematic_code": "def print_fruits():\nfruit1 = \"orange\"\nfruit2 = \"apple\"  # [unused-variable]\nprint(fruit1)",
    "correct_code": "def print_fruits():\nfruit1 = \"orange\"\nfruit2 = \"apple\"\nprint(fruit1, fruit2)"
},
{
    "error_id": "unused-wildcard-import",
    "problematic_code": "from abc import *  # [unused-wildcard-import]\n\n\nclass Animal(ABC): ...",
    "correct_code": "from abc import ABC\n\n\nclass Animal(ABC): ..."
},
{
    "error_id": "useless-else-on-loop",
    "problematic_code": "def find_even_number(numbers):\nfor x in numbers:\nif x % 2 == 0:\nreturn x\nelse:  # [useless-else-on-loop]\nprint(\"Did not find an even number\")",
    "correct_code": "def find_even_number(numbers):\nfor x in numbers:\nif x % 2 == 0:\nreturn x\nprint(\"Did not find an even number\")"
},
{
    "error_id": "useless-param-doc",
    "problematic_code": "def say_hello(_new: str) -> str:  # [useless-param-doc]\n\"\"\"say hello!\n\n:param _new:\n:return: comment\n\"\"\"\nreturn \"hello\"",
    "correct_code": "def say_hello(_new: str) -> str:\n\"\"\"say hello!\n\n:return: comment\n\"\"\"\nreturn \"hello\""
},
{
    "error_id": "useless-parent-delegation",
    "problematic_code": "class Animal:\ndef eat(self, food):\nprint(f\"Eating {food}\")\n\n\nclass Human(Animal):\ndef eat(self, food):  # [useless-parent-delegation]\nsuper(Human, self).eat(food)",
    "correct_code": "class Animal:\ndef eat(self, food):\nprint(f\"Eating {food}\")\n\n\nclass Human(Animal):\n\"\"\"There is no need to override 'eat' it has the same signature as the implementation in Animal.\"\"\""
},
{
    "error_id": "useless-type-doc",
    "problematic_code": "def print_fruit(fruit, _):  # [useless-type-doc]\n\"\"\"docstring ...\n\nArgs:\nfruit (str): A fruit.\n_ (float): Another argument.\n\"\"\"\nprint(fruit)",
    "correct_code": "def print_fruit(fruit):\n\"\"\"docstring ...\n\nArgs:\nfruit (str): A fruit.\n\"\"\"\nprint(fruit)"
},
{
    "error_id": "useless-with-lock",
    "problematic_code": "import threading\n\nwith threading.Lock():  # [useless-with-lock]\nprint(\"Make your bed.\")\nwith threading.Lock():  # [useless-with-lock]\nprint(\"Sleep in it\")",
    "correct_code": "import threading\n\nlock = threading.Lock()\nwith lock:\nprint(\"Make your bed.\")\nwith lock:\nprint(\"Sleep in it.\")"
},
{
    "error_id": "using-assignment-expression-in-unsupported-version",
    "problematic_code": "import random\n\n# +1: [using-assignment-expression-in-unsupported-version]\nif zero_or_one := random.randint(0, 1):\nassert zero_or_one == 1",
    "correct_code": "import random\n\nzero_or_one = random.randint(0, 1)\nif zero_or_one:\nassert zero_or_one == 1"
},
{
    "error_id": "using-constant-test",
    "problematic_code": "if 0:  # [using-constant-test]\nprint(\"This code is never executed.\")\nif 1:  # [using-constant-test]\nprint(\"This code is always executed.\")",
    "correct_code": "print(\"This code is always executed.\")"
},
{
    "error_id": "using-exception-groups-in-unsupported-version",
    "problematic_code": "def f():\nexcs = [OSError(\"error 1\"), SystemError(\"error 2\")]\n# +1: [using-exception-groups-in-unsupported-version]\nraise ExceptionGroup(\"there were problems\", excs)\n\n\ntry:  # [using-exception-groups-in-unsupported-version]\nf()\nexcept* OSError as e:\nprint(\"There were OSErrors\")\nexcept* SystemError as e:\nprint(\"There were SystemErrors\")",
    "correct_code": "def f():\nraise OSError(\"error 1\")\n\n\ntry:\nf()\nexcept OSError as e:\nprint(\"There were OSErrors\")\nexcept SystemError as e:\nprint(\"There were SystemErrors\")"
},
{
    "error_id": "using-f-string-in-unsupported-version",
    "problematic_code": "f\"python {3.5} is past end of life\"  # [using-f-string-in-unsupported-version]",
    "correct_code": "\"python {} is past end of life\".format(3.5)"
},
{
    "error_id": "using-final-decorator-in-unsupported-version",
    "problematic_code": "from typing import final\n\n\n@final  # [using-final-decorator-in-unsupported-version]\nclass Playtypus(Animal):\n@final  # [using-final-decorator-in-unsupported-version]\ndef lay_egg(self): ...",
    "correct_code": "class Playtypus(Animal):\ndef lay_egg(self): ..."
},
{
    "error_id": "using-generic-type-syntax-in-unsupported-version",
    "problematic_code": "type Vector = list[float]  # [using-generic-type-syntax-in-unsupported-version]",
    "correct_code": "from typing import TypeAlias\n\nVector: TypeAlias = list[float]"
},
{
    "error_id": "using-positional-only-args-in-unsupported-version",
    "problematic_code": "def add(x, y, /):  # [using-positional-only-args-in-unsupported-version]\nreturn x + y",
    "correct_code": "# pylint: disable=missing-function-docstring, missing-module-docstring\ndef add(x, y):\nreturn x + y"
},
{
    "error_id": "while-used",
    "problematic_code": "import requests\n\n\ndef fetch_data():\ni = 1\nwhile i < 6:  # [while-used]\nprint(f\"Attempt {i}...\")\ntry:\nreturn requests.get(\"https://example.com/data\")\nexcept requests.exceptions.RequestException:\npass\ni += 1",
    "correct_code": "import requests\n\n\ndef fetch_data():\nfor i in range(1, 6):\nprint(f\"Attempt {i}...\")\ntry:\nreturn requests.get(\"https://example.com/data\")\nexcept requests.exceptions.RequestException:\npass"
},
{
    "error_id": "wildcard-import",
    "problematic_code": "from abc import *  # [wildcard-import]",
    "correct_code": "# Either import module or\n# only import required objects from module.\nimport abc\nfrom abc import ABC, abstractmethod"
},
{
    "error_id": "wrong-exception-operation",
    "problematic_code": "try:\n1 / 0\nexcept ValueError + TypeError:  # [wrong-exception-operation]\npass",
    "correct_code": "try:\n1 / 0\nexcept (ValueError, TypeError):\npass"
},
{
    "error_id": "bad-classmethod-argument",
    "problematic_code": "class Klass:\n@classmethod\ndef get_instance(self):  # [bad-classmethod-argument]\nreturn self()",
    "correct_code": "class Klass:\n@classmethod\ndef get_instance(cls):\nreturn cls()"
},
{
    "error_id": "bad-docstring-quotes",
    "problematic_code": "def foo():  # [bad-docstring-quotes]\n\"Docstring.\"\nreturn",
    "correct_code": "def foo():\n\"\"\"Docstring.\"\"\"\nreturn"
},
{
    "error_id": "bad-file-encoding",
    "problematic_code": "# coding: latin_1 # [bad-file-encoding]",
    "correct_code": ""
},
{
    "error_id": "bad-mcs-classmethod-argument",
    "problematic_code": "class Meta(type):\n@classmethod\ndef foo(some):  # [bad-mcs-classmethod-argument]\npass",
    "correct_code": "class Meta(type):\n@classmethod\ndef foo(mcs):\npass"
},
{
    "error_id": "bad-mcs-method-argument",
    "problematic_code": "class Meta(type):\ndef func(some):  # [bad-mcs-method-argument]\npass",
    "correct_code": "class Meta(type):\ndef func(cls):\npass"
},
{
    "error_id": "consider-iterating-dictionary",
    "problematic_code": "FRUITS = {\"apple\": 1, \"pear\": 5, \"peach\": 10}\n\n\nfor fruit in FRUITS.keys():  # [consider-iterating-dictionary]\nprint(fruit)",
    "correct_code": "FRUITS = {\"apple\": 1, \"pear\": 5, \"peach\": 10}\n\n\nfor fruit in FRUITS:\nprint(fruit)"
},
{
    "error_id": "consider-using-any-or-all",
    "problematic_code": "def all_even(items):\n\"\"\"Return True if the list contains all even numbers\"\"\"\nfor item in items:  # [consider-using-any-or-all]\nif not item % 2 == 0:\nreturn False\nreturn True",
    "correct_code": "def any_even(items):\n\"\"\"Return True if the list contains any even numbers\"\"\"\nfor item in items:  # [consider-using-any-or-all]\nif item % 2 == 0:\nreturn True\nreturn False"
},
{
    "error_id": "consider-using-dict-items",
    "problematic_code": "ORCHESTRA = {\n\"violin\": \"strings\",\n\"oboe\": \"woodwind\",\n\"tuba\": \"brass\",\n\"gong\": \"percussion\",\n}\n\n\nfor instrument in ORCHESTRA:  # [consider-using-dict-items]\nprint(f\"{instrument}: {ORCHESTRA[instrument]}\")",
    "correct_code": "ORCHESTRA = {\n\"violin\": \"strings\",\n\"oboe\": \"woodwind\",\n\"tuba\": \"brass\",\n\"gong\": \"percussion\",\n}\n\n\nfor instrument, section in ORCHESTRA.items():\nprint(f\"{instrument}: {section}\")"
},
{
    "error_id": "consider-using-enumerate",
    "problematic_code": "seasons = [\"Spring\", \"Summer\", \"Fall\", \"Winter\"]\n\nfor i in range(len(seasons)):  # [consider-using-enumerate]\nprint(i, seasons[i])",
    "correct_code": "seasons = [\"Spring\", \"Summer\", \"Fall\", \"Winter\"]\n\nfor i, season in enumerate(seasons):\nprint(i, season)"
},
{
    "error_id": "consider-using-f-string",
    "problematic_code": "from string import Template\n\nmenu = (\"eggs\", \"spam\", 42.4)\n\nold_order = \"%s and %s: %.2f \u00a4\" % menu  # [consider-using-f-string]\nbeginner_order = menu[0] + \" and \" + menu[1] + \": \" + str(menu[2]) + \" \u00a4\"\njoined_order = \" and \".join(menu[:2])\n# +1: [consider-using-f-string]\nformat_order = \"{} and {}: {:0.2f} \u00a4\".format(menu[0], menu[1], menu[2])\n# +1: [consider-using-f-string]\nnamed_format_order = \"{eggs} and {spam}: {price:0.2f} \u00a4\".format(\neggs=menu[0], spam=menu[1], price=menu[2]\n)\ntemplate_order = Template(\"$eggs and $spam: $price \u00a4\").substitute(\neggs=menu[0], spam=menu[1], price=menu[2]\n)",
    "correct_code": "menu = (\"eggs\", \"spam\", 42.4)\n\nf_string_order = f\"{menu[0]} and {menu[1]}: {menu[2]:0.2f} \u00a4\""
},
{
    "error_id": "dict-init-mutate",
    "problematic_code": "fruit_prices = {}  # [dict-init-mutate]\nfruit_prices[\"apple\"] = 1\nfruit_prices[\"banana\"] = 10",
    "correct_code": "fruit_prices = {\"apple\": 1, \"banana\": 10}"
},
{
    "error_id": "disallowed-name",
    "problematic_code": "def foo():  # [disallowed-name]\nprint(\"apples\")",
    "correct_code": "def print_fruit():\nprint(\"apples\")"
},
{
    "error_id": "docstring-first-line-empty",
    "problematic_code": "def foo():  # [docstring-first-line-empty]\n\"\"\"\n\nLorem Ipsum is simply dummy text of the printing and typesetting\nindustry.\n\nLorem Ipsum has been the industry's standard dummy text ever since the\n1500s, when an unknown printer took a galley of type and scrambled it\nto make a type specimen book\n\"\"\"",
    "correct_code": "def foo():\n\"\"\"Lorem Ipsum is simply dummy text of the printing and typesetting\nindustry.\n\nLorem Ipsum has been the industry's standard dummy text ever since the\n1500s, when an unknown printer took a galley of type and scrambled it\nto make a type specimen book\n\"\"\""
},
{
    "error_id": "empty-docstring",
    "problematic_code": "def foo():  # [empty-docstring]\n\"\"\"\"\"\"",
    "correct_code": "def foo():\n\"\"\"A dummy description.\"\"\""
},
{
    "error_id": "import-outside-toplevel",
    "problematic_code": "def print_python_version():\nimport sys  # [import-outside-toplevel]\n\nprint(sys.version_info)",
    "correct_code": "import sys\n\n\ndef print_python_version():\nprint(sys.version_info)"
},
{
    "error_id": "import-private-name",
    "problematic_code": "from argparse import _AttributeHolder, _SubParsersAction  # [import-private-name]\n\nattr_holder = _AttributeHolder()\n\n\ndef add_sub_parser(sub_parsers: _SubParsersAction):\nsub_parsers.add_parser(\"my_subparser\")\n# ...",
    "correct_code": "\"\"\"Private import can be used as type annotations.\"\"\"\n\nfrom argparse import _SubParsersAction\n\n\ndef add_sub_parser(sub_parsers: _SubParsersAction):\nsub_parsers.add_parser(\"my_subparser\")\n# ..."
},
{
    "error_id": "invalid-name",
    "problematic_code": "class cat:  # [invalid-name]\ndef Meow(self, NUMBER_OF_MEOW):  # [invalid-name, invalid-name]\nprint(\"Meow\" * NUMBER_OF_MEOW)\nreturn NUMBER_OF_MEOW\n\n\nCat = cat().Meow(42)  # [invalid-name]",
    "correct_code": "class Cat:\ndef meow(self, number_of_meow):\nprint(\"Meow\" * number_of_meow)\nreturn number_of_meow\n\n\nCAT = Cat().meow(42)"
},
{
    "error_id": "line-too-long",
    "problematic_code": "# +1: [line-too-long]\nFRUIT = [\"apricot\", \"blackcurrant\", \"cantaloupe\", \"dragon fruit\", \"elderberry\", \"fig\", \"grapefruit\", ]",
    "correct_code": "FRUIT = [\n\"apricot\",\n\"blackcurrant\",\n\"cantaloupe\",\n\"dragon fruit\",\n\"elderberry\",\n\"fig\",\n\"grapefruit\",\n]"
},
{
    "error_id": "misplaced-comparison-constant",
    "problematic_code": "def compare_apples(apples=20):\nfor i in range(10):\nif 5 <= i:  # [misplaced-comparison-constant]\npass\nif 1 == i:  # [misplaced-comparison-constant]\npass\nif 20 < len(apples):  # [misplaced-comparison-constant]\npass",
    "correct_code": "def compare_apples(apples=20):\nfor i in range(10):\nif i >= 5:\npass\nif i == 1:\npass\nif len(apples) > 20:\npass"
},
{
    "error_id": "missing-class-docstring",
    "problematic_code": "class Person:  # [missing-class-docstring]\ndef __init__(self, first_name, last_name):\nself.first_name = first_name\nself.last_name = last_name",
    "correct_code": "class Person:\n\"\"\"Class representing a person\"\"\"\n\ndef __init__(self, first_name, last_name):\nself.first_name = first_name\nself.last_name = last_name"
},
{
    "error_id": "missing-final-newline",
    "problematic_code": "print(\"Hello\")  # CRLF (\\r\\n)\nprint(\"world\")  # End-of-file (EOF)\n# [missing-final-newline]",
    "correct_code": "print(\"Hello\")  # LF (\\n)\nprint(\"world\")  # End-of-file (EOF)\n# [missing-final-newline]"
},
{
    "error_id": "missing-function-docstring",
    "problematic_code": "import sys\n\n\ndef print_python_version():  # [missing-function-docstring]\nprint(sys.version)",
    "correct_code": "import sys\n\n\ndef print_python_version():\n\"\"\"Function printing python version.\"\"\"\nprint(sys.version)"
},
{
    "error_id": "missing-module-docstring",
    "problematic_code": "import sys  # [missing-module-docstring]\n\n\ndef print_python_version():\nprint(sys.version)",
    "correct_code": "\"\"\"Module providing a function printing python version.\"\"\"\n\nimport sys\n\n\ndef print_python_version():\nprint(sys.version)"
},
{
    "error_id": "mixed-line-endings",
    "problematic_code": "print(\"Hello\")  # CRLF (\\r\\n)\nprint(\"World\")  # LF (\\n) # [mixed-line-endings]",
    "correct_code": "print(\"Hello\")  # CRLF (\\r\\n)\nprint(\"World\")  # CRLF (\\r\\n)"
},
{
    "error_id": "multiple-imports",
    "problematic_code": "import os, sys  # [multiple-imports]",
    "correct_code": "import os\nimport sys"
},
{
    "error_id": "multiple-statements",
    "problematic_code": "fruits = [\"apple\", \"orange\", \"mango\"]\n\nif \"apple\" in fruits: pass  # [multiple-statements]\nelse:\nprint(\"no apples!\")",
    "correct_code": "fruits = [\"apple\", \"orange\", \"mango\"]\n\nif \"apple\" in fruits:\npass\nelse:\nprint(\"no apples!\")"
},
{
    "error_id": "non-ascii-module-import",
    "problematic_code": "from os.path import join as \u0142os  # [non-ascii-module-import]\n\nfoo = \u0142os(\"a\", \"b\")",
    "correct_code": "from os.path import join as os_join\n\nfoo = os_join(\"a\", \"b\")"
},
{
    "error_id": "non-ascii-name",
    "problematic_code": "\u00e1pple_count = 4444  # [non-ascii-name]",
    "correct_code": "apple_count = 4444"
},
{
    "error_id": "single-string-used-for-slots",
    "problematic_code": "class Fruit:  # [single-string-used-for-slots]\n__slots__ = \"name\"\n\ndef __init__(self, name):\nself.name = name",
    "correct_code": "class Fruit:\n__slots__ = (\"name\",)\n\ndef __init__(self, name):\nself.name = name"
},
{
    "error_id": "singleton-comparison",
    "problematic_code": "game_won = True\nif game_won == True:  # [singleton-comparison]\nprint(\"Game won !\")",
    "correct_code": "game_won = True\nif game_won:\nprint(\"Game won !\")"
},
{
    "error_id": "superfluous-parens",
    "problematic_code": "x = input()\ny = input()\nif (x == y):  # [superfluous-parens]\npass",
    "correct_code": "i = 0\nexclude = []\nif (i - 0) in exclude:  # [superfluous-parens]\npass"
},
{
    "error_id": "too-many-lines",
    "problematic_code": "def is_palindrome(string):  # [too-many-lines]\nleft_pos = 0\nright_pos = len(string) - 1\nwhile right_pos >= left_pos:\nif not string[left_pos] == string[right_pos]:\nreturn False\nleft_pos += 1\nright_pos -= 1\nreturn True\n\n\ndef main():\nprint(is_palindrome(\"aza\"))\nprint(is_palindrome(\"racecar\"))\nprint(is_palindrome(\"trigger\"))\nprint(is_palindrome(\"ogre\"))",
    "correct_code": "__all__ = [\"is_palindrome\", \"main\"]\n\nfrom is_palindrome import is_palindrome\nfrom main import main"
},
{
    "error_id": "trailing-newlines",
    "problematic_code": "print(\"apple\")\n# The file ends with 2 lines that are empty # +1: [trailing-newlines]",
    "correct_code": "print(\"apple\")"
},
{
    "error_id": "trailing-whitespace",
    "problematic_code": "print(\"Hello\")  # [trailing-whitespace]\n#                                       ^^^ trailing whitespaces",
    "correct_code": "print(\"Hello\")"
},
{
    "error_id": "typevar-double-variance",
    "problematic_code": "from typing import TypeVar\n\nT = TypeVar(\"T\", covariant=True, contravariant=True)  # [typevar-double-variance]",
    "correct_code": "from typing import TypeVar\n\nT_co = TypeVar(\"T_co\", covariant=True)\nT_contra = TypeVar(\"T_contra\", contravariant=True)"
},
{
    "error_id": "typevar-name-incorrect-variance",
    "problematic_code": "from typing import TypeVar\n\nT_co = TypeVar(\"T_co\")  # [typevar-name-incorrect-variance]",
    "correct_code": "from typing import TypeVar\n\nT = TypeVar(\"T\")"
},
{
    "error_id": "typevar-name-mismatch",
    "problematic_code": "from typing import TypeVar\n\nX = TypeVar(\"T\")  # [typevar-name-mismatch]",
    "correct_code": "from typing import TypeVar\n\nT = TypeVar(\"T\")"
},
{
    "error_id": "unexpected-line-ending-format",
    "problematic_code": "print(\"I'm drinking tea!\")  # CRLF (\\r\\n) # [unexpected-line-ending-format]\nprint(\"I'm drinking water!\")  # CRLF (\\r\\n) # [unexpected-line-ending-format]",
    "correct_code": "print(\"I'm drinking tea!\")  # LF (\\n)\nprint(\"I'm drinking water!\")  # LF (\\n)"
},
{
    "error_id": "ungrouped-imports",
    "problematic_code": "import logging\nimport os\nimport sys\nimport logging.config  # [ungrouped-imports]\nfrom logging.handlers import WatchedFileHandler",
    "correct_code": "import logging\nimport logging.config\nimport os\nimport sys\nfrom logging.handlers import FileHandler"
},
{
    "error_id": "unidiomatic-typecheck",
    "problematic_code": "test_score = {\"Biology\": 95, \"History\": 80}\nif type(test_score) is dict:  # [unidiomatic-typecheck]\npass",
    "correct_code": "test_score = {\"Biology\": 95, \"History\": 80}\nif isinstance(test_score, dict):\npass"
},
{
    "error_id": "unnecessary-direct-lambda-call",
    "problematic_code": "y = (lambda x: x**2 + 2 * x + 1)(a)  # [unnecessary-direct-lambda-call]",
    "correct_code": "y = a**2 + 2 * a + 1"
},
{
    "error_id": "unnecessary-dunder-call",
    "problematic_code": "three = (3.0).__str__()  # [unnecessary-dunder-call]\ntwelve = \"1\".__add__(\"2\")  # [unnecessary-dunder-call]\n\n\ndef is_bigger_than_two(x):\nreturn x.__gt__(2)  # [unnecessary-dunder-call]",
    "correct_code": "three = str(3.0)\ntwelve = \"1\" + \"2\"\n\n\ndef is_bigger_than_two(x):\nreturn x > 2"
},
{
    "error_id": "unnecessary-lambda-assignment",
    "problematic_code": "foo = lambda x: x**2 + 2 * x + 1  # [unnecessary-lambda-assignment]",
    "correct_code": "def foo(x):\nreturn x**2 + 2 * x + 1"
},
{
    "error_id": "unnecessary-negation",
    "problematic_code": "if not not input():  # [unnecessary-negation]\npass",
    "correct_code": "a = 3\nb = 10\nif not a > b:  # [unnecessary-negation]\npass"
},
{
    "error_id": "use-implicit-booleaness-not-comparison",
    "problematic_code": "z = []\n\nif z != []:  # [use-implicit-booleaness-not-comparison]\nprint(\"z is not an empty sequence\")",
    "correct_code": "z = []\n\nif z:\nprint(\"z is not an empty sequence\")"
},
{
    "error_id": "use-implicit-booleaness-not-comparison-to-string",
    "problematic_code": "def important_string_manipulation(x: str, y: str) -> None:\nif x == \"\":  # [use-implicit-booleaness-not-comparison-to-string]\nprint(\"x is an empty string\")\n\nif y != \"\":  # [use-implicit-booleaness-not-comparison-to-string]\nprint(\"y is not an empty string\")",
    "correct_code": "def important_string_manipulation(x: str, y: str) -> None:\nif not x:\nprint(\"x is an empty string\")\n\nif y:\nprint(\"y is not an empty string\")"
},
{
    "error_id": "use-implicit-booleaness-not-comparison-to-zero",
    "problematic_code": "def important_math(x: int, y: int) -> None:\nif x == 0:  # [use-implicit-booleaness-not-comparison-to-zero]\nprint(\"x is equal to zero\")\n\nif y != 0:  # [use-implicit-booleaness-not-comparison-to-zero]\nprint(\"y is not equal to zero\")",
    "correct_code": "def important_math(x: int, y: int) -> None:\nif not x:\nprint(\"x is equal to zero\")\n\nif y:\nprint(\"y is not equal to zero\")"
},
{
    "error_id": "use-implicit-booleaness-not-len",
    "problematic_code": "fruits = [\"orange\", \"apple\"]\n\nif len(fruits):  # [use-implicit-booleaness-not-len]\nprint(fruits)",
    "correct_code": "fruits = [\"orange\", \"apple\"]\n\nif fruits:\nprint(fruits)"
},
{
    "error_id": "use-maxsplit-arg",
    "problematic_code": "url = \"www.example.com\"\nsuffix = url.split(\".\")[-1]  # [use-maxsplit-arg]",
    "correct_code": "url = \"www.example.com\"\nsuffix = url.rsplit(\".\", maxsplit=1)[-1]"
},
{
    "error_id": "use-sequence-for-iteration",
    "problematic_code": "for food in {\"apples\", \"lemons\", \"water\"}:  # [use-sequence-for-iteration]\nprint(f\"I like {food}.\")",
    "correct_code": "for food in [\"apples\", \"lemons\", \"water\"]:\nprint(f\"I like {food}.\")"
},
{
    "error_id": "useless-import-alias",
    "problematic_code": "import pandas as pandas  # [useless-import-alias]",
    "correct_code": "import pandas as pd"
},
{
    "error_id": "wrong-import-order",
    "problematic_code": "import os\nfrom . import utils\nimport pylint  # [wrong-import-order]\nimport sys  # [wrong-import-order]",
    "correct_code": "import os\nimport sys\n\nimport pylint\n\nfrom . import utils"
},
{
    "error_id": "wrong-import-position",
    "problematic_code": "import os\n\nhome = os.environ[\"HOME\"]\n\nimport sys  # [wrong-import-position]\n\nprint(f\"Home directory is {home}\", file=sys.stderr)",
    "correct_code": "import os\nimport sys\n\nhome = os.environ[\"HOME\"]\nprint(f\"Home directory is {home}\", file=sys.stderr)"
},
{
    "error_id": "wrong-spelling-in-comment",
    "problematic_code": "# There's a mistkae in this string  # [wrong-spelling-in-comment]",
    "correct_code": "# There's no mistake in this string"
},
{
    "error_id": "wrong-spelling-in-docstring",
    "problematic_code": "\"\"\"There's a mistkae in this string\"\"\"  # [wrong-spelling-in-docstring]",
    "correct_code": "\"\"\"There's no mistake in this string\"\"\""
},
{
    "error_id": "chained-comparison",
    "problematic_code": "a = int(input())\nb = int(input())\nc = int(input())\nif a < b and b < c:  # [chained-comparison]\npass",
    "correct_code": "a = int(input())\nb = int(input())\nc = int(input())\nif a < b < c:\npass"
},
{
    "error_id": "comparison-of-constants",
    "problematic_code": "def is_the_answer() -> bool:\nreturn 42 == 42  # [comparison-of-constants]",
    "correct_code": "def is_the_answer(meaning_of_life: int) -> bool:\nreturn meaning_of_life == 42"
},
{
    "error_id": "comparison-with-itself",
    "problematic_code": "def is_an_orange(fruit):\nan_orange = \"orange\"\nreturn fruit == fruit  # [comparison-with-itself]",
    "correct_code": "def is_an_orange(fruit):\nan_orange = \"orange\"\nreturn an_orange == fruit"
},
{
    "error_id": "condition-evals-to-constant",
    "problematic_code": "def is_a_fruit(fruit):\nreturn bool(fruit in {\"apple\", \"orange\"} or True)  # [condition-evals-to-constant]",
    "correct_code": "def is_a_fruit(fruit):\nreturn fruit in {\"apple\", \"orange\"}"
},
{
    "error_id": "confusing-consecutive-elif",
    "problematic_code": "def myfunc(shall_continue: bool, shall_exit: bool):\nif shall_continue:\nif input(\"Are you sure?\") == \"y\":\nprint(\"Moving on.\")\nelif shall_exit:  # [confusing-consecutive-elif]\nprint(\"Exiting.\")",
    "correct_code": "# Option 1: add explicit 'else'\ndef myfunc(shall_continue: bool, shall_exit: bool):\nif shall_continue:\nif input(\"Are you sure?\") == \"y\":\nprint(\"Moving on.\")\nelse:\npass\nelif shall_exit:\nprint(\"Exiting.\")\n\n\n# Option 2: extract function\ndef user_confirmation():\nif input(\"Are you sure?\") == \"y\":\nprint(\"Moving on.\")\n\n\ndef myfunc2(shall_continue: bool, shall_exit: bool):\nif shall_continue:\nuser_confirmation()\nelif shall_exit:\nprint(\"Exiting.\")"
},
{
    "error_id": "consider-alternative-union-syntax",
    "problematic_code": "from typing import Union\n\ncats: Union[int, str]  # [consider-alternative-union-syntax]",
    "correct_code": "cats: int | str"
},
{
    "error_id": "consider-merging-isinstance",
    "problematic_code": "from typing import Any\n\n\ndef is_number(value: Any) -> bool:\n# +1: [consider-merging-isinstance]\nreturn isinstance(value, int) or isinstance(value, float)",
    "correct_code": "from typing import Any\n\n\ndef is_number(value: Any) -> bool:\nreturn isinstance(value, (int, float))"
},
{
    "error_id": "consider-refactoring-into-while-condition",
    "problematic_code": "fruit_basket = [\"apple\", \"orange\", \"banana\", \"cherry\", \"guava\"]\n\nwhile True:  # [consider-refactoring-into-while-condition]\nif len(fruit_basket) == 0:\nbreak\nfruit = fruit_basket.pop()\nprint(f\"We removed {fruit} from the basket\")",
    "correct_code": "fruit_basket = [\"apple\", \"orange\", \"banana\", \"cherry\", \"guava\"]\n\nwhile len(fruit_basket) != 0:\nfruit = fruit_basket.pop()\nprint(f\"We removed {fruit} from the basket\")"
},
{
    "error_id": "consider-swap-variables",
    "problematic_code": "a = 1\nb = 2\n\ntemp = a  # [consider-swap-variables]\na = b\nb = temp",
    "correct_code": "a = 1\nb = 2\n\na, b = b, a"
},
{
    "error_id": "consider-using-alias",
    "problematic_code": "import typing\n\ncats: typing.Dict[str, int]  # [consider-using-alias]",
    "correct_code": "import typing\n\ncats: typing.cast(dict[str, int], \"string\")"
},
{
    "error_id": "consider-using-assignment-expr",
    "problematic_code": "apples = 2\n\nif apples:  # [consider-using-assignment-expr]\nprint(\"God apples!\")",
    "correct_code": "if apples := 2:\nprint(\"God apples!\")"
},
{
    "error_id": "consider-using-augmented-assign",
    "problematic_code": "x = 1\nx = x + 1  # [consider-using-augmented-assign]",
    "correct_code": "x = 1\nx += 1"
},
{
    "error_id": "consider-using-dict-comprehension",
    "problematic_code": "NUMBERS = [1, 2, 3]\n\n# +1: [consider-using-dict-comprehension]\nDOUBLED_NUMBERS = dict([(number, number * 2) for number in NUMBERS])",
    "correct_code": "NUMBERS = [1, 2, 3]\n\nDOUBLED_NUMBERS = {number: number * 2 for number in NUMBERS}"
},
{
    "error_id": "consider-using-from-import",
    "problematic_code": "import os.path as path  # [consider-using-from-import]",
    "correct_code": "from os import path"
},
{
    "error_id": "consider-using-generator",
    "problematic_code": "list([0 for y in list(range(10))])  # [consider-using-generator]\ntuple([0 for y in list(range(10))])  # [consider-using-generator]\nsum([y**2 for y in list(range(10))])  # [consider-using-generator]\nmax([y**2 for y in list(range(10))])  # [consider-using-generator]\nmin([y**2 for y in list(range(10))])  # [consider-using-generator]",
    "correct_code": "list(0 for y in list(range(10)))\ntuple(0 for y in list(range(10)))\nsum(y**2 for y in list(range(10)))\nmax(y**2 for y in list(range(10)))\nmin(y**2 for y in list(range(10)))"
},
{
    "error_id": "consider-using-get",
    "problematic_code": "knights = {\"Gallahad\": \"the pure\", \"Robin\": \"the brave\"}\n\nif \"Gallahad\" in knights:  # [consider-using-get]\nDESCRIPTION = knights[\"Gallahad\"]\nelse:\nDESCRIPTION = \"\"",
    "correct_code": "knights = {\"Gallahad\": \"the pure\", \"Robin\": \"the brave\"}\n\ndescription = knights.get(\"Gallahad\", \"\")"
},
{
    "error_id": "consider-using-in",
    "problematic_code": "def fruit_is_round(fruit):\n# +1: [consider-using-in]\nreturn fruit == \"apple\" or fruit == \"orange\" or fruit == \"melon\"",
    "correct_code": "def fruit_is_round(fruit):\nreturn fruit in {\"apple\", \"orange\", \"melon\"}"
},
{
    "error_id": "consider-using-join",
    "problematic_code": "def fruits_to_string(fruits):\nformatted_fruit = \"\"\nfor fruit in fruits:\nformatted_fruit += fruit  # [consider-using-join]\nreturn formatted_fruit\n\n\nprint(fruits_to_string([\"apple\", \"pear\", \"peach\"]))",
    "correct_code": "print(\"\".join([\"apple\", \"pear\", \"peach\"]))"
},
{
    "error_id": "consider-using-max-builtin",
    "problematic_code": "def get_max(value1, value2):\nif value1 < value2:  # [consider-using-max-builtin]\nvalue1 = value2\nreturn value1\n\n\nprint(get_max(1, 2))",
    "correct_code": "print(max(1, 2))"
},
{
    "error_id": "consider-using-min-builtin",
    "problematic_code": "def get_min(value1, value2):\nif value1 > value2:  # [consider-using-min-builtin]\nvalue1 = value2\nreturn value1\n\n\nprint(get_min(1, 2))",
    "correct_code": "print(min(1, 2))"
},
{
    "error_id": "consider-using-namedtuple-or-dataclass",
    "problematic_code": "FELIDAES = {  # [consider-using-namedtuple-or-dataclass]\n\"The queen's cymric, fragile furry friend\": {\n\"tail_length_cm\": 1,\n\"paws\": 4,\n\"eyes\": 2,\n\"Elizabethan collar\": 1,\n},\n\"Rackat the red, terror of the sea\": {\n\"tail_length_cm\": 13,\n\"paws\": 3,\n\"eyes\": 1,\n\"Red Hat\": 1,\n},\n}",
    "correct_code": "from typing import NamedTuple\n\n\nclass FelidaeCharacteristics(NamedTuple):\ntail_length_cm: int\npaws: int\neyes: int\nhat: str | None\n\n\nFELIDAES = {\n\"The queen's cymric, fragile furry friend\": FelidaeCharacteristics(\ntail_length_cm=1, paws=4, eyes=2, hat=\"Elizabethan collar\"\n),\n\"Rackat the red, terror of the sea\": FelidaeCharacteristics(\ntail_length_cm=21, paws=3, eyes=1, hat=\"Red Hat\"\n),\n}"
},
{
    "error_id": "consider-using-set-comprehension",
    "problematic_code": "NUMBERS = [1, 2, 2, 3, 4, 4]\n\n# +1: [consider-using-set-comprehension]\nUNIQUE_EVEN_NUMBERS = set([number for number in NUMBERS if number % 2 == 0])",
    "correct_code": "NUMBERS = [1, 2, 2, 3, 4, 4]\n\nUNIQUE_EVEN_NUMBERS = {number for number in NUMBERS if number % 2 == 0}"
},
{
    "error_id": "consider-using-sys-exit",
    "problematic_code": "if __name__ == \"__main__\":\nuser = input(\"Enter user name: \")\nprint(f\"Hello, {user}\")\nexit(0)  # [consider-using-sys-exit]",
    "correct_code": "import sys\n\nif __name__ == \"__main__\":\nuser = input(\"Enter user name: \")\nprint(f\"Hello, {user}\")\nsys.exit(0)"
},
{
    "error_id": "consider-using-ternary",
    "problematic_code": "x, y = 1, 2\nmaximum = x >= y and x or y  # [consider-using-ternary]",
    "correct_code": "x, y = 1, 2\nmaximum = x if x >= y else y"
},
{
    "error_id": "consider-using-tuple",
    "problematic_code": "for i in [1, 2, 3]:  # [consider-using-tuple]\nprint(i)",
    "correct_code": "for i in (1, 2, 3):\nprint(i)"
},
{
    "error_id": "consider-using-with",
    "problematic_code": "file = open(\"apple.txt\", \"r\", encoding=\"utf8\")  # [consider-using-with]\ncontents = file.read()\nfile.close()",
    "correct_code": "contents = open(\"apple.txt\", \"r\", encoding=\"utf8\").read()  # [consider-using-with]"
},
{
    "error_id": "cyclic-import",
    "problematic_code": "",
    "correct_code": "def count_to_one():\nreturn 1\n\n\ndef count_to_three():\nfrom .bad2 import count_to_two\n\nreturn count_to_two() + 1"
},
{
    "error_id": "duplicate-code",
    "problematic_code": "",
    "correct_code": "class Apple:\ndef __init__(self):\nself.remaining_bites = 3\n\ndef take_bite(self):\nif self.remaining_bites > 0:\nprint(\"You take a bite of the apple.\")\nself.remaining_bites -= 1\nelse:\nprint(\"The apple is already eaten up!\")\n\ndef eaten_by_animal(self, animal):\nself.remaining_bites = 0\nprint(\"The apple has been eaten by an animal.\")"
},
{
    "error_id": "else-if-used",
    "problematic_code": "if input():\npass\nelse:\nif len(input()) >= 10:  # [else-if-used]\npass\nelse:\npass",
    "correct_code": "if input():\npass\nelif len(input()) >= 10:\npass\nelse:\npass"
},
{
    "error_id": "empty-comment",
    "problematic_code": "# +1:[empty-comment]\n#\n\n# +1:[empty-comment]\nx = 0  #",
    "correct_code": "# comment\n\nx = 0  # comment"
},
{
    "error_id": "inconsistent-return-statements",
    "problematic_code": "def get_the_answer(value: str) -> str | None:  # [inconsistent-return-statements]\nif value:\nreturn value",
    "correct_code": "def get_the_answer(value: str) -> str | None:\nif value:\nreturn value\nreturn None"
},
{
    "error_id": "literal-comparison",
    "problematic_code": "def is_an_orange(fruit):\nreturn fruit is \"orange\"  # [literal-comparison]",
    "correct_code": "def is_an_orange(fruit):\nreturn fruit == \"orange\""
},
{
    "error_id": "magic-value-comparison",
    "problematic_code": "import random\n\nmeasurement = random.randint(0, 200)\nabove_threshold = False\ni = 0\nwhile i < 5:  # [magic-value-comparison]\nabove_threshold = measurement > 100  # [magic-value-comparison]\nif above_threshold:\nbreak\nmeasurement = random.randint(0, 200)",
    "correct_code": "import random\n\nMAX_NUM_OF_ITERATIONS = 5\nTHRESHOLD_VAL = 100\nMIN_MEASUREMENT_VAL = 0\nMAX_MEASUREMENT_VAL = 200\n\nmeasurement = random.randint(MIN_MEASUREMENT_VAL, MAX_MEASUREMENT_VAL)\nabove_threshold = False\ni = 0\nwhile i < MAX_NUM_OF_ITERATIONS:\nabove_threshold = measurement > THRESHOLD_VAL\nif above_threshold:\nbreak\nmeasurement = random.randint(MIN_MEASUREMENT_VAL, MAX_MEASUREMENT_VAL)"
},
{
    "error_id": "no-classmethod-decorator",
    "problematic_code": "class Fruit:\nCOLORS = []\n\ndef __init__(self, color):\nself.color = color\n\ndef pick_colors(cls, *args):\n\"\"\"classmethod to pick fruit colors\"\"\"\ncls.COLORS = args\n\npick_colors = classmethod(pick_colors)  # [no-classmethod-decorator]",
    "correct_code": "class Fruit:\nCOLORS = []\n\ndef __init__(self, color):\nself.color = color\n\n@classmethod\ndef pick_colors(cls, *args):\n\"\"\"classmethod to pick fruit colors\"\"\"\ncls.COLORS = args"
},
{
    "error_id": "no-else-break",
    "problematic_code": "def next_seven_elements(iterator):\nfor i, item in enumerate(iterator):\nif i == 7:  # [no-else-break]\nbreak\nelse:\nyield item",
    "correct_code": "def next_seven_elements(iterator):\nfor i, item in enumerate(iterator):\nif i == 7:\nbreak\nyield item"
},
{
    "error_id": "no-else-continue",
    "problematic_code": "def even_number_under(n: int):\nfor i in range(n):\nif i % 2 == 1:  # [no-else-continue]\ncontinue\nelse:\nyield i",
    "correct_code": "def even_number_under(n: int):\nfor i in range(n):\nif i % 2 == 1:\ncontinue\nyield i"
},
{
    "error_id": "no-else-raise",
    "problematic_code": "def integer_sum(a: int, b: int) -> int:\nif not (isinstance(a, int) and isinstance(b, int)):  # [no-else-raise]\nraise ValueError(\"Function supports only integer parameters.\")\nelse:\nreturn a + b",
    "correct_code": "def integer_sum(a: int, b: int) -> int:\nif not (isinstance(a, int) and isinstance(b, int)):\nraise ValueError(\"Function supports only integer parameters.\")\nreturn a + b"
},
{
    "error_id": "no-else-return",
    "problematic_code": "def compare_numbers(a: int, b: int) -> int:\nif a == b:  # [no-else-return]\nreturn 0\nelif a < b:\nreturn -1\nelse:\nreturn 1",
    "correct_code": "def compare_numbers(a: int, b: int) -> int:\nif a == b:\nreturn 0\nif a < b:\nreturn -1\nreturn 1"
},
{
    "error_id": "no-self-use",
    "problematic_code": "class Person:\ndef greeting(self):  # [no-self-use]\nprint(\"Greetings pythonista!\")",
    "correct_code": "def greeting():\nprint(\"Greetings pythonista!\")"
},
{
    "error_id": "no-staticmethod-decorator",
    "problematic_code": "class Worm:\ndef bore(self):\npass\n\nbore = staticmethod(bore)  # [no-staticmethod-decorator]",
    "correct_code": "class Worm:\n@staticmethod\ndef bore(self):\npass"
},
{
    "error_id": "prefer-typing-namedtuple",
    "problematic_code": "from collections import namedtuple\n\nPhilosophy = namedtuple(  # [prefer-typing-namedtuple]\n\"Philosophy\", (\"goodness\", \"truth\", \"beauty\")\n)",
    "correct_code": "from typing import NamedTuple\n\n\nclass Philosophy(NamedTuple):\ngoodness: str\ntruth: bool\nbeauty: float"
},
{
    "error_id": "property-with-parameters",
    "problematic_code": "class Worm:\n@property\ndef bore(self, depth):  # [property-with-parameters]\npass",
    "correct_code": "class Worm:\n@property\ndef bore(self):\n\"\"\"Property accessed with '.bore'.\"\"\"\npass\n\ndef bore_with_depth(depth):\n\"\"\"Function called with .bore_with_depth(depth).\"\"\"\npass"
},
{
    "error_id": "redefined-argument-from-local",
    "problematic_code": "def show(host_id=10.11):\n# +1: [redefined-argument-from-local]\nfor host_id, host in [[12.13, \"Venus\"], [14.15, \"Mars\"]]:\nprint(host_id, host)",
    "correct_code": "def show(host_id=10.11):\nfor inner_host_id, host in [[12.13, \"Venus\"], [14.15, \"Mars\"]]:\nprint(host_id, inner_host_id, host)"
},
{
    "error_id": "redefined-variable-type",
    "problematic_code": "x = 1\nx = \"2\"  # [redefined-variable-type]",
    "correct_code": "x = 1\nx = 2"
},
{
    "error_id": "redundant-typehint-argument",
    "problematic_code": "from typing import Union\n\nsweet_count: Union[int, str, int] = 42  # [redundant-typehint-argument]",
    "correct_code": "from typing import Union\n\nsweet_count: Union[str, int] = 42"
},
{
    "error_id": "simplifiable-condition",
    "problematic_code": "def has_apples(apples) -> bool:\nreturn bool(apples or False)  # [simplifiable-condition]",
    "correct_code": "def has_apples(apples) -> bool:\nreturn bool(apples)"
},
{
    "error_id": "simplifiable-if-expression",
    "problematic_code": "FLYING_THINGS = [\"bird\", \"plane\", \"superman\", \"this example\"]\n\n\ndef is_flying_thing(an_object):\nreturn True if an_object in FLYING_THINGS else False  # [simplifiable-if-expression]\n\n\ndef is_not_flying_thing(an_object):\nreturn False if an_object in FLYING_THINGS else True  # [simplifiable-if-expression]",
    "correct_code": "FLYING_THINGS = [\"bird\", \"plane\", \"superman\", \"this example\"]\n\n\ndef is_flying_thing(an_object):\nreturn an_object in FLYING_THINGS\n\n\ndef is_not_flying_thing(an_object):\nreturn an_object not in FLYING_THINGS"
},
{
    "error_id": "simplifiable-if-statement",
    "problematic_code": "FLYING_THINGS = [\"bird\", \"plane\", \"superman\", \"this example\"]\n\n\ndef is_flying_animal(an_object):\n# +1: [simplifiable-if-statement]\nif isinstance(an_object, Animal) and an_object in FLYING_THINGS:\nis_flying = True\nelse:\nis_flying = False\nreturn is_flying",
    "correct_code": "FLYING_THINGS = [\"bird\", \"plane\", \"superman\", \"this example\"]\n\n\ndef is_flying_animal(an_object):\nis_flying = isinstance(an_object, Animal) and an_object.name in FLYING_THINGS\nreturn is_flying"
},
{
    "error_id": "simplify-boolean-expression",
    "problematic_code": "def has_oranges(oranges, apples=None) -> bool:\nreturn apples and False or oranges  # [simplify-boolean-expression]",
    "correct_code": "def has_oranges(oranges, apples=None) -> bool:\nreturn oranges"
},
{
    "error_id": "stop-iteration-return",
    "problematic_code": "def fruit_generator():\nfor fruit in [\"apple\", \"banana\"]:\nyield fruit\nraise StopIteration  # [stop-iteration-return]",
    "correct_code": "def two_fruits_generator(fruits):\nfor fruit in fruits:\nyield fruit, next(fruits)  # [stop-iteration-return]"
},
{
    "error_id": "super-with-arguments",
    "problematic_code": "class Fruit:\npass\n\n\nclass Orange(Fruit):\ndef __init__(self):\nsuper(Orange, self).__init__()  # [super-with-arguments]",
    "correct_code": "class Fruit:\npass\n\n\nclass Orange(Fruit):\ndef __init__(self):\nsuper().__init__()"
},
{
    "error_id": "too-complex",
    "problematic_code": "def fifty_percent_off(whole):\nreturn (float(whole)) * 50 / 100\n\n\ndef calculate_sum_and_display_price_of_fruits(*fruits):  # [too-complex]\n# McCabe rating is 13 here (by default 10)\nshopping_list = []\n\nif \"apple\" in fruits:\nv = fifty_percent_off(1.1)\nshopping_list.append(v)\nif \"pear\" in fruits:\nshopping_list.append(0.8)\nif \"banana\" in fruits:\nshopping_list.append(1.2)\nif \"mango\" in fruits:\nshopping_list.append(3.5)\nif \"peach\" in fruits:\nshopping_list.append(0.5)\nif \"melon\" in fruits:\nshopping_list.append(4.9)\nif \"orange\" in fruits:\nshopping_list.append(2.0)\nif \"strawberry\" in fruits:\nshopping_list.append(2.5)\nif \"mandarin\" in fruits:\nshopping_list.append(2.3)\nif \"plum\" in fruits:\nshopping_list.append(0.5)\nif \"watermelon\" in fruits:\nv = fifty_percent_off(6.4)\nshopping_list.append(v)\n\ncombine = zip(fruits, shopping_list)\n\nfor i in combine:\nprint(f\"{i[0]} ${i[1]:.2f}\")\n\ntotal = sum(shopping_list)\nprint(f\"Total price is ${total:.2f}\")\n\n\nfruits_to_buy = [\"apple\", \"orange\", \"watermelon\"]\ncalculate_sum_and_display_price_of_fruits(*fruits_to_buy)",
    "correct_code": "FRUIT_PRICES = {\n\"apple\": 1.1,\n\"pear\": 0.8,\n\"banana\": 1.2,\n\"mango\": 3.5,\n\"peach\": 0.5,\n\"melon\": 4.9,\n\"orange\": 2.0,\n\"strawberry\": 2.5,\n\"mandarin\": 2.3,\n\"plum\": 0.5,\n\"watermelon\": 6.4,\n}\nDISCOUNTED_FRUITS = [\"apple\", \"watermelon\"]\n\n\ndef fifty_percent_off(whole):\nreturn (float(whole)) * 50 / 100\n\n\ndef get_price(fruit):\nfull_price = FRUIT_PRICES.get(fruit)\nif fruit in DISCOUNTED_FRUITS:\nreturn fifty_percent_off(full_price)\nelse:\nreturn full_price\n\n\ndef display_fruit_and_price(fruits):\nfor fruit in fruits:\nprint(f\"{fruit} ${get_price(fruit) :.2f}\")\n\n\ndef get_total(fruits):\nreturn sum(get_price(f) for f in fruits)\n\n\nfruits_to_buy = [\"apple\", \"orange\", \"watermelon\"]\ndisplay_fruit_and_price(fruits_to_buy)\nprint(f\"Total price is ${get_total(fruits_to_buy):.2f}\")"
},
{
    "error_id": "too-few-public-methods",
    "problematic_code": "class Worm:  # [too-few-public-methods]\ndef __init__(self, name: str, fruit_of_residence: Fruit):\nself.name = name\nself.fruit_of_residence = fruit_of_residence\n\ndef bore(self):\nprint(f\"{self.name} is boring into {self.fruit_of_residence}\")",
    "correct_code": "import dataclasses\n\n\n@dataclasses.dataclass\nclass Worm:\nname: str\nfruit_of_residence: Fruit\n\n\ndef bore(worm: Worm):\nprint(f\"{worm.name} is boring into {worm.fruit_of_residence}\")"
},
{
    "error_id": "too-many-ancestors",
    "problematic_code": "class Animal: ...\nclass BeakyAnimal(Animal): ...\nclass FurryAnimal(Animal): ...\nclass Swimmer(Animal): ...\nclass EggLayer(Animal): ...\nclass VenomousAnimal(Animal): ...\nclass ProtectedSpecie(Animal): ...\nclass BeaverTailedAnimal(Animal): ...\nclass Vertebrate(Animal): ...\n\n\n# max of 7 by default, can be configured\n# each edge of a diamond inheritance counts\nclass Playtypus(  # [too-many-ancestors]\nBeakyAnimal,\nFurryAnimal,\nSwimmer,\nEggLayer,\nVenomousAnimal,\nProtectedSpecie,\nBeaverTailedAnimal,\nVertebrate,\n):\npass",
    "correct_code": "class Animal:\nbeaver_tailed: bool\ncan_swim: bool\nhas_beak: bool\nhas_fur: bool\nhas_vertebrae: bool\nlays_egg: bool\nprotected_specie: bool\nvenomous: bool\n\n\nclass Invertebrate(Animal):\nhas_vertebrae = False\n\n\nclass Vertebrate(Animal):\nhas_vertebrae = True\n\n\nclass Mammal(Vertebrate):\nhas_beak = False\nhas_fur = True\nlays_egg = False\nvenomous = False\n\n\nclass Playtypus(Mammal):\nbeaver_tailed = True\ncan_swim = True\nhas_beak = True\nlays_egg = True\nprotected_specie = True\nvenomous = True"
},
{
    "error_id": "too-many-arguments",
    "problematic_code": "def three_d_chess_move(  # [too-many-arguments]\nx_white,\ny_white,\nz_white,\npiece_white,\nx_black,\ny_black,\nz_black,\npiece_black,\nx_blue,\ny_blue,\nz_blue,\npiece_blue,\ncurrent_player,\n):\npass",
    "correct_code": "from dataclasses import dataclass\n\n\n@dataclass\nclass ThreeDChessPiece:\nx: int\ny: int\nz: int\ntype: str\n\n\ndef three_d_chess_move(\nwhite: ThreeDChessPiece,\nblack: ThreeDChessPiece,\nblue: ThreeDChessPiece,\ncurrent_player,\n):\npass"
},
{
    "error_id": "too-many-boolean-expressions",
    "problematic_code": "def can_be_divided_by_two_and_are_not_zero(x, y, z):\n# Maximum number of boolean expressions in an if statement (by default 5)\n# +1: [too-many-boolean-expressions]\nif (x and y and z) and (x % 2 == 0 and y % 2 == 0 and z % 2 == 0):\npass",
    "correct_code": "def can_be_divided_by_two_and_are_not_zero(x, y, z):\nif all(i and i % 2 == 0 for i in [x, y, z]):\npass"
},
{
    "error_id": "too-many-branches",
    "problematic_code": "def num_to_word(x):  # [too-many-branches]\nif x == 0:\nreturn \"zero\"\nelif x == 1:\nreturn \"one\"\nelif x == 2:\nreturn \"two\"\nelif x == 3:\nreturn \"three\"\nelif x == 4:\nreturn \"four\"\nelif x == 5:\nreturn \"five\"\nelif x == 6:\nreturn \"six\"\nelif x == 7:\nreturn \"seven\"\nelif x == 8:\nreturn \"eight\"\nelif x == 9:\nreturn \"nine\"\nelse:\nreturn None",
    "correct_code": "def num_to_word(x):\nreturn {\n0: \"zero\",\n1: \"one\",\n2: \"two\",\n3: \"three\",\n4: \"four\",\n5: \"five\",\n6: \"six\",\n7: \"seven\",\n8: \"eight\",\n9: \"nine\",\n}.get(x)"
},
{
    "error_id": "too-many-instance-attributes",
    "problematic_code": "class Fruit:  # [too-many-instance-attributes]\ndef __init__(self):\n# max of 7 attributes by default, can be configured\nself.worm_name = \"Jimmy\"\nself.worm_type = \"Codling Moths\"\nself.worm_color = \"light brown\"\nself.fruit_name = \"Little Apple\"\nself.fruit_color = \"Bright red\"\nself.fruit_vitamins = [\"A\", \"B1\"]\nself.fruit_antioxidants = None\nself.secondary_worm_name = \"Kim\"\nself.secondary_worm_type = \"Apple maggot\"\nself.secondary_worm_color = \"Whitish\"",
    "correct_code": "import dataclasses\n\n\n@dataclasses.dataclass\nclass Worm:\nname: str\ntype: str\ncolor: str\n\n\nclass Fruit:\ndef __init__(self):\nself.name = \"Little Apple\"\nself.color = \"Bright red\"\nself.vitamins = [\"A\", \"B1\"]\nself.antioxidants = None\nself.worms = [\nWorm(name=\"Jimmy\", type=\"Codling Moths\", color=\"light brown\"),\nWorm(name=\"Kim\", type=\"Apple maggot\", color=\"Whitish\"),\n]"
},
{
    "error_id": "too-many-locals",
    "problematic_code": "from childhood import Child, Sweet\n\n\ndef handle_sweets(infos):  # [too-many-locals]\n# Create children\nchildren = [Child(info) for info in infos]\nnumber_of_sweets = 87\nsweets = [Sweet() * number_of_sweets]\nnumber_of_sweet_per_child = 5\nmoney = 45.0\nsweets_given = 0\ntime_to_eat_sweet = 54\nprice_of_sweet = 0.42\n# distribute sweet\nfor child in children:\nsweets_given += number_of_sweet_per_child\nchild.give(sweets[number_of_sweet_per_child:])\n# calculate prices\ncost_of_children = sweets_given * price_of_sweet\n# Calculate remaining money\nremaining_money = money - cost_of_children\n# Calculate time it took\ntime_it_took_assuming_parallel_eating = (\ntime_to_eat_sweet * number_of_sweet_per_child\n)\nprint(\nf\"{children} ate {cost_of_children}\u00a4 of sweets in {time_it_took_assuming_parallel_eating}, \"\nf\"you still have {remaining_money}\"\n)",
    "correct_code": "from typing import NamedTuple\n\nfrom childhood import Child, Sweet\n\n\nclass SweetDistrubutionCharacteristics(NamedTuple):\nnumber_of_sweets: int\nnumber_of_sweet_per_child: int\nnumber_of_children: int\n\n@property\ndef sweets_given(self):\nreturn self.number_of_sweet_per_child * self.number_of_children\n\n\ndef handle_sweets(infos):\nchildren = [Child(info) for info in infos]\ncharacteristics = SweetDistrubutionCharacteristics(87, 5, len(children))\n_allocate_sweets_to_children(children, characteristics)\nfinancial_impact = _assess_financial_impact(characteristics)\nprint(f\"{children} ate {financial_impact}\")\n\n\ndef _allocate_sweets_to_children(\nchildren, characteristics: SweetDistrubutionCharacteristics\n) -> None:\nsweets = [Sweet() * characteristics.number_of_sweets]\nfor child in children:\nchild.give(sweets[characteristics.number_of_sweet_per_child :])\n\n\ndef _assess_financial_impact(characteristics: SweetDistrubutionCharacteristics) -> str:\ntime_to_eat_sweet = 54\nmoney = 45.0\nprice_of_sweet = 0.42\ncost_of_children = characteristics.sweets_given * price_of_sweet\nremaining_money = money - cost_of_children\ntime_it_took_assuming_parallel_eating = (\ntime_to_eat_sweet * characteristics.number_of_sweet_per_child\n)\nreturn (\nf\"{cost_of_children}\u00a4 of sweets in \"\nf\"{time_it_took_assuming_parallel_eating}, you still have {remaining_money}\"\n)"
},
{
    "error_id": "too-many-nested-blocks",
    "problematic_code": "def correct_fruits(fruits):\nif len(fruits) > 1:  # [too-many-nested-blocks]\nif \"apple\" in fruits:\nif \"orange\" in fruits:\ncount = fruits[\"orange\"]\nif count % 2:\nif \"kiwi\" in fruits:\nif count == 2:\nreturn True\nreturn False",
    "correct_code": "def correct_fruits(fruits):\nif len(fruits) > 1 and \"apple\" in fruits and \"orange\" in fruits:\ncount = fruits[\"orange\"]\nif count % 2 and \"kiwi\" in fruits and count == 2:\nreturn True\nreturn False"
},
{
    "error_id": "too-many-positional-arguments",
    "problematic_code": "class FiveArgumentMethods:\n\"\"\"The max positional arguments default is 5.\"\"\"\n\ndef take_five_args(self, a, b, c, d, e):  # [too-many-positional-arguments]\npass",
    "correct_code": "class FiveArgumentMethods:\n\"\"\"The max positional arguments default is 5.\"\"\"\n\ndef take_five_args(self, a, b, c, d, *, e=False):\npass"
},
{
    "error_id": "too-many-public-methods",
    "problematic_code": "class SpaceInvaders:  # [too-many-public-methods]\ndef __init__(self):\npass\n\ndef fire_laser_beam(self):\npass\n\ndef deploy_shield(self):\npass\n\ndef launch_missile(self):\npass\n\ndef activate_super_laser(self):\npass\n\ndef summon_mothership(self):\npass\n\ndef destroy_planet(self):\npass\n\ndef teleport(self):\npass\n\ndef invoke_aliens(self):\npass\n\ndef invade_earth(self):\npass\n\ndef takeover_galaxy(self):\npass",
    "correct_code": "class LaserBeam:\ndef __init__(self):\npass\n\ndef fire(self):\npass\n\ndef activate_super(self):\npass\n\ndef destroy_planet(self):\npass\n\n\nclass Shield:\ndef deploy(self):\npass\n\n\nclass Missile:\ndef launch(self):\npass\n\n\nclass SpaceInvaders:\ndef __init__(self):\nself.laser = LaserBeam()\nself.shield = Shield()\nself.missile = Missile()\n\ndef summon_mothership(self):\npass\n\ndef destroy_planet(self):\npass\n\ndef teleport(self):\npass\n\ndef invoke_aliens(self):\npass\n\ndef invade_earth(self):\npass\n\ndef takeover_galaxy(self):\npass"
},
{
    "error_id": "too-many-return-statements",
    "problematic_code": "def to_string(x):  # [too-many-return-statements]\n# max of 6 by default, can be configured\nif x == 1:\nreturn \"This is one.\"\nif x == 2:\nreturn \"This is two.\"\nif x == 3:\nreturn \"This is three.\"\nif x == 4:\nreturn \"This is four.\"\nif x == 5:\nreturn \"This is five.\"\nif x == 6:\nreturn \"This is six.\"\nif x == 7:\nreturn \"This is seven.\"",
    "correct_code": "NUMBERS_TO_STRINGS = {\n1: \"one\",\n2: \"two\",\n3: \"three\",\n4: \"four\",\n5: \"five\",\n6: \"six\",\n7: \"seven\",\n}\n\n\ndef to_string(x):\nreturn f\"This is {NUMBERS_TO_STRINGS.get(x)}.\""
},
{
    "error_id": "too-many-statements",
    "problematic_code": "import random\n\n\ndef distribute_candies(  # [too-many-statements]\nchildren: list[Child], candies_per_child: int\n):\n# This function is a masterpiece of code that embodies the epitome of efficiency\n# it's also an essential part of a high-priority project with extremely tight deadlines\n# and there is absolutely no time to refactor it to make it more concise.\n# The lead developer on the project, who has decades of experience,\n# has personally reviewed this implementation and deemed it good enough as it is.\n# The person writing this code has a demanding job and multiple responsibilities,\n# and simply does not have the luxury of spending time making this code more readable.\ntotal_candies = len(children) * candies_per_child\neaten_candies = 0\n# Counting candies given to each child\nfor child in children:\n# If a child eat more than 1 candies they're going to eat all\n# the candies for sure\neaten_for_child = random.choices([0, 1, candies_per_child])\nprint(\nf\"Child {child} gets {candies_per_child} candies and eat {eaten_for_child}\"\n)\nremaining_candies_for_children = child.eat_candies(eaten_for_child)\nif remaining_candies_for_children == 0:\nprint(f\"All the candies have been devoured by {child.name}!\")\nelse:\nprint(\nf\"{child.name} still have {remaining_candies_for_children} candies left.\"\n)\neaten_candies += eaten_for_child\nreturn eaten_candies, total_candies",
    "correct_code": "import random\n\n\ndef distribute_candies(children: list[Child], candies_per_child: int):\ntotal_candies = len(children) * candies_per_child\neaten_candies = 0\nfor child in children:\neaten_candies += _distribute_candies_to_child(candies_per_child, child)\nreturn eaten_candies, total_candies\n\n\ndef _distribute_candies_to_child(candies_per_child: int, child: Child):\n# If a child eat more than 1 candies they're going to eat all\n# the candies for sure\neaten_for_child = random.choices([0, 1, candies_per_child])\nprint(f\"Child {child} gets {candies_per_child} candies and eat {eaten_for_child}\")\nremaining_candies_for_children = child.eat_candies(eaten_for_child)\nif remaining_candies_for_children == 0:\nprint(f\"All the candies have been devoured by {child.name}!\")\nelse:\nprint(f\"{child.name} still have {remaining_candies_for_children} candies left.\")\nreturn eaten_for_child"
},
{
    "error_id": "trailing-comma-tuple",
    "problematic_code": "COMPASS = \"north\", \"south\", \"east\", \"west\",  # [trailing-comma-tuple]",
    "correct_code": "COMPASS = (\"north\", \"south\", \"east\", \"west\")"
},
{
    "error_id": "unnecessary-comprehension",
    "problematic_code": "NUMBERS = [1, 1, 2, 2, 3, 3]\n\nUNIQUE_NUMBERS = {number for number in NUMBERS}  # [unnecessary-comprehension]",
    "correct_code": "NUMBERS = [1, 1, 2, 2, 3, 3]\n\nUNIQUE_NUMBERS = set(NUMBERS)"
},
{
    "error_id": "unnecessary-default-type-args",
    "problematic_code": "from collections.abc import AsyncGenerator, Generator\n\na1: AsyncGenerator[int, None]  # [unnecessary-default-type-args]\nb1: Generator[int, None, None]  # [unnecessary-default-type-args]",
    "correct_code": "from collections.abc import AsyncGenerator, Generator\n\na1: AsyncGenerator[int]\nb1: Generator[int]"
},
{
    "error_id": "unnecessary-dict-index-lookup",
    "problematic_code": "FRUITS = {\"apple\": 1, \"orange\": 10, \"berry\": 22}\n\nfor fruit_name, fruit_count in FRUITS.items():\nprint(FRUITS[fruit_name])  # [unnecessary-dict-index-lookup]",
    "correct_code": "FRUITS = {\"apple\": 1, \"orange\": 10, \"berry\": 22}\n\nfor fruit_name, fruit_count in FRUITS.items():\nprint(fruit_count)"
},
{
    "error_id": "unnecessary-list-index-lookup",
    "problematic_code": "letters = [\"a\", \"b\", \"c\"]\n\nfor index, letter in enumerate(letters):\nprint(letters[index])  # [unnecessary-list-index-lookup]",
    "correct_code": "letters = [\"a\", \"b\", \"c\"]\n\nfor index, letter in enumerate(letters):\nprint(letter)"
},
{
    "error_id": "use-a-generator",
    "problematic_code": "from random import randint\n\nall([randint(-5, 5) > 0 for _ in range(10)])  # [use-a-generator]\nany([randint(-5, 5) > 0 for _ in range(10)])  # [use-a-generator]",
    "correct_code": "from random import randint\n\nall(randint(-5, 5) > 0 for _ in range(10))\nany(randint(-5, 5) > 0 for _ in range(10))"
},
{
    "error_id": "use-dict-literal",
    "problematic_code": "empty_dict = dict()  # [use-dict-literal]",
    "correct_code": "original_dict = {\"name\": \"Sunny\", \"age\": 10, \"favorite_color\": \"yellow\"}\ncopied_dict = dict(**original_dict)  # [use-dict-literal]"
},
{
    "error_id": "use-list-literal",
    "problematic_code": "empty_list = list()  # [use-list-literal]",
    "correct_code": "empty_list = []"
},
{
    "error_id": "use-set-for-membership",
    "problematic_code": "def fruit_is_dangerous_for_cat(fruit: str) -> bool:\n\"\"\"This list is only a silly example, don't make decision regarding your cat diet based on it.\"\"\"\nreturn fruit in [\"cherry\", \"grapes\"]  # [use-set-for-membership]",
    "correct_code": "def fruit_is_dangerous_for_cat(fruit: str) -> bool:\n\"\"\"This list is only a silly example, don't make decision regarding your cat diet based on it.\"\"\"\nreturn fruit in {\"cherry\", \"grapes\"}"
},
{
    "error_id": "use-yield-from",
    "problematic_code": "def bad_yield_from(generator):\nfor item in generator:  # [use-yield-from]\nyield item",
    "correct_code": "def good_yield_from(generator):\nyield from generator"
},
{
    "error_id": "useless-object-inheritance",
    "problematic_code": "class Banana(object):  # [useless-object-inheritance]\n...",
    "correct_code": "class Banana: ..."
},
{
    "error_id": "useless-option-value",
    "problematic_code": "\"\"\"'bad-continuation' was removed from pylint in https://github.com/pylint-dev/pylint/pull/3571\"\"\"\n\n# pylint: disable=bad-continuation  # [useless-option-value]",
    "correct_code": "\"\"\"'bad-continuation' was removed from pylint in https://github.com/pylint-dev/pylint/pull/3571\"\"\""
},
{
    "error_id": "useless-return",
    "problematic_code": "import sys\n\n\ndef print_python_version():  # [useless-return]\nprint(sys.version)\nreturn None",
    "correct_code": "import sys\n\n\ndef print_python_version():\nprint(sys.version)"
},
{
    "error_id": "bad-inline-option",
    "problematic_code": "# 2:[bad-inline-option]\n# pylint: disable line-too-long",
    "correct_code": "# pylint: disable=line-too-long"
},
{
    "error_id": "deprecated-pragma",
    "problematic_code": "# pylint: disable-msg=eval-used # [deprecated-pragma]",
    "correct_code": "# pylint: disable = eval-used"
},
{
    "error_id": "file-ignored",
    "problematic_code": "# pylint: skip-file\n# -1: [file-ignored]",
    "correct_code": ""
},
{
    "error_id": "locally-disabled",
    "problematic_code": "def wizard_spells(spell_book):\n# pylint: disable=maybe-no-member # [locally-disabled]\nfor spell in spell_book:\nprint(f\"Abracadabra! {spell}.\")\n\n\nspell_list = [\"Levitation\", \"Invisibility\", \"Fireball\", \"Teleportation\"]\nwizard_spells(spell_list)",
    "correct_code": "def wizard_spells(spell_book):\nfor spell in spell_book:\nprint(f\"Abracadabra! {spell}.\")\n\n\nspell_list = [\"Levitation\", \"Invisibility\", \"Fireball\", \"Teleportation\"]\nwizard_spells(spell_list)"
},
{
    "error_id": "suppressed-message",
    "problematic_code": "### This is a contrived example, to show how suppressed-message works.\n### First we enable all messages\n# pylint: enable=all\n\n### Here we disable two messages so we get two warnings\n# pylint: disable=locally-disabled, useless-suppression # [suppressed-message, suppressed-message]\n\n### Here we disable a message, so we get a warning for suppressed-message again.\n\"A\"  # pylint: disable=pointless-statement # [suppressed-message, suppressed-message]",
    "correct_code": "\"\"\"Instead of a single string somewhere in the file, write a module docstring!\"\"\""
},
{
    "error_id": "use-symbolic-message-instead",
    "problematic_code": "fruit_name = \"plum\"\n\n\n# pylint: disable-next=W0621\ndef eat(fruit_name: str):  # [use-symbolic-message-instead]\n...",
    "correct_code": "fruit_name = \"plum\"\n\n\n# pylint: disable-next=redefined-outer-name\ndef eat(fruit_name: str): ..."
},
{
    "error_id": "useless-suppression",
    "problematic_code": "fruit_counter = 0\n\n\n# pylint: disable-next=redefined-outer-name\ndef eat(fruit_name: str):  # [useless-suppression]\n...",
    "correct_code": "fruit_counter = 0\n\n\ndef eat(fruit_name: str): ..."
}
]